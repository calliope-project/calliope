constraints:

    energy_capacity_systemwide:
        foreach: [tech in techs]
        where: "(energy_cap_equals_systemwide OR energy_cap_max_systemwide) AND NOT run.mode=operate"
        equations:
            - where: "energy_cap_equals_systemwide"
              expression: sum(energy_cap[node, tech], over=[node in nodes]) == energy_cap_equals_systemwide[tech]
            - where: "NOT energy_cap_equals_systemwide"
              expression: sum(energy_cap[node, tech], over=[node in nodes]) <= energy_cap_max_systemwide[tech]

    carrier_production_max:
        foreach: [node in nodes, tech in techs, carrier in carriers, timestep in timesteps]
        where: "carrier AND NOT inheritance(conversion_plus) AND NOT cap_method=integer AND allowed_carrier_prod=True AND [out] in carrier_tiers"
        equation: carrier_prod[carrier, node, tech, timestep] <= energy_cap[node, tech] * timestep_resolution[timestep] * parasitic_eff[node, tech, timestep]

    carrier_production_min:
        foreach: [node in nodes, tech in techs, carrier in carriers, timestep in timesteps]
        where: "carrier AND energy_cap_min_use AND NOT inheritance(conversion_plus) AND NOT cap_method=integer AND allowed_carrier_prod=True AND [out] in carrier_tiers"
        equation: carrier_prod[carrier, node, tech, timestep] >= energy_cap[node, tech] * timestep_resolution[timestep] * energy_cap_min_use[node, tech, timestep]

    carrier_consumption_max:
        foreach: [node in nodes, tech in techs, carrier in carriers, timestep in timesteps]
        where: "carrier AND (inheritance(transmission) OR inheritance(demand) OR inheritance(storage)) AND (NOT cap_method=integer OR inheritance(demand)) AND allowed_carrier_con=True AND [in] in carrier_tiers"
        equation: carrier_con[carrier, node, tech, timestep] >= -1 * energy_cap[node, tech] * timestep_resolution[timestep]

    resource_max:
        foreach: [node in nodes, tech in techs, timestep in timesteps]
        where: inheritance(supply_plus)
        equation: resource_con[node, tech, timestep] <= timestep_resolution[timestep] * resource_cap[node, tech]

    system_balance:
        foreach: [node in nodes, carrier in carriers, timestep in timesteps]
        equation: "$carrier_prod + $carrier_con - $carrier_export + $unmet_demand + $unused_supply == 0"
        components:
            carrier_prod:
                - expression: sum(carrier_prod[carrier, node, tech, timestep], over=[tech in techs])
            carrier_con:
                - expression: sum(carrier_con[carrier, node, tech, timestep], over=[tech in techs])
            carrier_export:
                - where: "carrier_export"
                  expression: sum(carrier_export[carrier, node, tech, timestep], over=[tech in techs])
                - where: "NOT carrier_export"
                  expression: "0"
            unmet_demand:
                - where: "unmet_demand"
                  expression: unmet_demand[carrier, node, timestep]
                - where: "NOT unmet_demand"
                  expression: "0"
            unused_supply:
                - where: "unused_supply"
                  expression: unused_supply[carrier, node, timestep]
                - where: "NOT unused_supply"
                  expression: "0"

    balance_supply:
        foreach: [node in nodes, tech in techs, carrier in carriers, timestep in timesteps]
        where: "resource AND inheritance(supply)"
        equations:
            - where: "force_resource AND energy_eff > 0"
              expression: "$carrier_prod == $available_resource"
            - where: "not force_resource AND energy_eff > 0"
              expression: "$carrier_prod <= $available_resource"
            - where: "energy_eff = 0"
              expression: "carrier_prod[carrier, node, tech, timestep] == 0"
        components:
            carrier_prod: &carrier_prod
                - expression: carrier_prod[carrier, node, tech, timestep] / energy_eff
            available_resource:
                - where: "resource_unit=energy_per_area"
                  expression: "resource[node, tech, timestep] * resource_scale[node, tech] * resource_area[node, tech]"
                - where: "resource_unit=energy_per_cap"
                  expression: "resource[node, tech, timestep] * resource_scale[node, tech] * energy_cap[node, tech]"
                - where: "resource_unit=energy"
                  expression: "resource[node, tech, timestep] * resource_scale[node, tech]"

    balance_supply_min_use:
        foreach: [node in nodes, tech in techs, carrier in carriers, timestep in timesteps]
        where: "resource AND inheritance(supply) AND resource_min_use AND energy_eff>0 AND NOT force_resource"
        equations:
            - expression: "resource_min_use[node, tech, timestep] <= $carrier_prod"
        components:
            carrier_prod: *carrier_prod

    balance_demand:
        foreach: [node in nodes, tech in techs, carrier in carriers, timestep in timesteps]
        where: "inheritance(demand)"
        equations:
            - where: "force_resource"
              expression: "$carrier_con == $required_resource"
            - where: "not force_resource"
              expression: "$carrier_con >= $required_resource"
        components:
            carrier_con:
                - expression: carrier_con[carrier, node, tech, timestep] * energy_eff
            required_resource:
                - where: "resource_unit=energy_per_area"
                  expression: "resource[node, tech, timestep] * resource_scale[node, tech] * resource_area[node, tech]"
                - where: "resource_unit=energy_per_cap"
                  expression: "resource[node, tech, timestep] * resource_scale[node, tech] * energy_cap[node, tech]"
                - where: "resource_unit=energy"
                  expression: "resource[node, tech, timestep] * resource_scale[node, tech]"

    balance_transmission:
        foreach: [node in nodes, tech in techs, carrier in carriers, timestep in timesteps]
        where: "inheritance(transmission) AND allowed_carrier_prod=True"
        equation: "carrier_prod[carrier, node, tech, timestep] == -1 * carrier_con[carrier, nodes=remote_node, techs=remote_tech, timestep] * energy_eff[node, tech, timestep]"
        index_items: &remote_node_tech
            remote_node:
                - expression: link_remote_nodes[node, tech]
            remote_tech:
                - expression: link_remote_techs[node, tech]

    symmetric_transmission:
        foreach: [node in nodes, tech in techs]
        where: "inheritance(transmission) AND NOT run.mode=operate"
        equation: energy_cap[node, tech] == energy_cap[remote_node, remote_tech]
        index_items:
            <<: *remote_node_tech

    cost_var:
        foreach: [node in nodes, tech in techs, cost in costs, timestep in timesteps]
        where: "cost_export OR cost_om_con OR cost_om_prod"
        equation: cost_variable[cost, node, tech, timestep] == timestep_weights[timestep] * ($cost_export + $cost_om_prod + $cost_om_con)
        components:
            cost_export:
                - where: "export_carrier AND cost_export"
                  expression: cost_export[cost, node, tech, timestep] * carrier_export[export_carrier, node, tech, timestep]
            cost_om_con:
                - where: "cost_om_con AND inheritance(supply_plus)"
                  expression: cost_om_con[cost, node, tech, timestep] * resource_con[node, tech, timestep]
                - where: "cost_om_con AND inheritance(supply) AND energy_eff>0"
                  expression: cost_om_con[cost, node, tech, timestep] * carrier_prod[prod_carrier, node, tech, timestep] / energy_eff[node, tech, timestep]
                - where: "cost_om_con AND inheritance(conversion_plus)"
                  expression: cost_om_con[cost, node, tech, timestep] * -1 * carrier_con[primary_con_carrier, node, tech, timestep]
                - where: "cost_om_con AND NOT (inheritance(conversion_plus) OR inheritance(supply_plus) OR inheritance(supply))"
                  expression: cost_om_con[cost, node, tech, timestep] * -1 * carrier_con[con_carrier, node, tech, timestep]
            cost_om_prod:
                - where: "cost_om_prod AND inheritance(conversion_plus)"
                  expression: cost_om_prod[cost, node, tech, timestep] * carrier_prod[primary_prod_carrier, node, tech, timestep]
                - where: "cost_om_prod AND NOT inheritance(conversion_plus)"
                  expression: cost_om_prod[cost, node, tech, timestep] * carrier_prod[prod_carrier, node, tech, timestep]
        index_items:
            export_carrier:
                - expression: lookup_export_carrier(node=node, tech=tech)
            prod_carrier:
                - expression: lookup_prod_carrier(node=node, tech=tech)
            con_carrier:
                - expression: lookup_con_carrier(node=node, tech=tech)
            primary_con_carrier:
                - expression: lookup_primary_con_carrier(node=node, tech=tech)
            primary_prod_carrier:
                - expression: lookup_primary_prod_carrier(node=node, tech=tech)


    cost_investment:
        foreach: [node in nodes, tech in techs, cost in costs]
        where: "(cost_energy_cap OR cost_om_annual OR cost_om_annual_investment_fraction OR cost_purchase OR cost_resource_area OR cost_resource_cap OR cost_storage_cap) AND NOT run.mode=operate"
        equations:
            - where: "NOT inheritance(transmission)"
              expression: >
                cost_investment[cost, node, tech] == timestep_weight() * (
                  cost_depreciation_rate[cost, node, tech] * (
                    $cost_energy_cap + $cost_storage_cap + $cost_resource_cap
                    + $cost_resource_area + $cost_of_purchase
                  ) * (1 + cost_om_annual_investment_fraction[cost, node, tech])
                  + cost_om_annual[cost, node, tech] * energy_cap[node, tech]
                )
            - where: "inheritance(transmission)"
              expression: >
                cost_investment[cost, node, tech] == timestep_weight() * (
                  cost_depreciation_rate[cost, node, tech] * (
                    $cost_energy_cap + $cost_storage_cap + $cost_resource_cap
                    + $cost_resource_area + $cost_of_purchase
                  ) * (0.5 + cost_om_annual_investment_fraction[cost, node, tech])
                  + cost_om_annual[cost, node, tech] * energy_cap[node, tech]
                )
        components:
            cost_energy_cap:
                - where: "cost_energy_cap"
                  expression: cost_energy_cap[cost, node, tech] * energy_cap[node, tech]
                - where: "NOT cost_energy_cap"
                  expression: "0"
            cost_storage_cap:
                - where: "cost_storage_cap AND (inheritance(supply_plus) OR inheritance(storage))"
                  expression: cost_storage_cap[cost, node, tech] * storage_cap[node, tech]
                - where: "NOT (cost_storage_cap AND (inheritance(supply_plus) OR inheritance(storage)))"
                  expression: "0"
            cost_resource_cap:
                - where: "cost_resource_cap AND inheritance(supply_plus)"
                  expression: cost_resource_cap[cost, node, tech] * resource_cap[node, tech]
                - where: "NOT (cost_resource_cap AND inheritance(supply_plus))"
                  expression: "0"
            cost_resource_area:
                - where: "cost_resource_area AND (resource_area_min OR resource_area_max OR resource_area_equals OR resource_area_per_energy_cap OR resource_unit=energy_per_area)"
                  expression: "cost_resource_area[cost, node, tech] * resource_area[node, tech]"
                - where: "NOT (cost_resource_area AND (resource_area_min OR resource_area_max OR resource_area_equals OR resource_area_per_energy_cap OR resource_unit=energy_per_area))"
                  expression: "0"
            cost_of_purchase:
                - where: "cost_purchase AND cap_method=binary"
                  expression: "cost_purchase[cost, node, tech] * purchased[node, tech]"
                - where: "cost_purchase AND cap_method=integer"
                  expression: "cost_purchase[cost, node, tech] * units[node, tech]"
                - where: "NOT (cost_purchase AND (cap_method=binary OR cap_method=integer))"
                  expression: "0"

    cost:
        foreach: [node in nodes, tech in techs, cost in costs]
        where: "cost_energy_cap OR cost_om_annual OR cost_om_annual_investment_fraction OR cost_purchase OR cost_resource_area OR cost_resource_cap OR cost_storage_cap OR cost_export OR cost_om_con OR cost_om_prod"
        equation: cost[cost, node, tech] == $cost_investment + $cost_var
        components:
            cost_investment:
                - where: "(cost_energy_cap OR cost_om_annual OR cost_om_annual_investment_fraction OR cost_purchase OR cost_resource_area OR cost_resource_cap OR cost_storage_cap) AND NOT run.mode=operate"
                  expression: cost_investment[cost, node, tech]
                - where: "NOT ((cost_energy_cap OR cost_om_annual OR cost_om_annual_investment_fraction OR cost_purchase OR cost_resource_area OR cost_resource_cap OR cost_storage_cap) AND NOT run.mode=operate)"
                  expression: "0"
            cost_var:
                - where: cost_export OR cost_om_con OR cost_om_prod
                  expression: sum(cost_variable[cost, node, tech, timestep], over=[timestep in timesteps])
                - where: NOT (cost_export OR cost_om_con OR cost_om_prod)
                  expression: "0"


variables:

    energy_cap:
        foreach: [node in nodes, tech in techs]
        where: "NOT run.mode=operate"
        domain: NonNegativeReals
        bounds:
            min: energy_cap_min
            max: energy_cap_max
            equals: energy_cap_equals
            scale: energy_cap_scale

    carrier_prod:
        foreach: [node in nodes, tech in techs, carrier in carriers, timestep in timesteps]
        where: "carrier AND allowed_carrier_prod=True AND [out, out_2, out_3] in carrier_tiers"
        domain: NonNegativeReals

    carrier_con:
        foreach: [node in nodes, tech in techs, carrier in carriers, timestep in timesteps]
        where: "carrier AND allowed_carrier_con=True AND [in, in_2, in_3] in carrier_tiers"
        domain: NonPositiveReals

    resource_area:
        foreach: [node in nodes, tech in techs]
        where: "(resource_area_min OR resource_area_max OR resource_area_equals OR resource_area_per_energy_cap OR resource_unit=energy_per_area) AND NOT run.mode=operate"
        domain: NonNegativeReals
        bounds:
            min: resource_area_min
            max: resource_area_max
            equals: resource_area_equals

    cost_variable:
        foreach: [node in nodes, tech in techs, cost in costs, timestep in timesteps]
        where: "cost_export OR cost_om_con OR cost_om_prod"
        domain: Reals

    cost_investment:
        foreach: [node in nodes, tech in techs, cost in costs]
        where: "(cost_energy_cap OR cost_om_annual OR cost_om_annual_investment_fraction OR cost_purchase OR cost_resource_area OR cost_resource_cap OR cost_storage_cap) AND NOT run.mode=operate"
        domain: NonNegativeReals

    cost:
        foreach: [node in nodes, tech in techs, cost in costs]
        where: "cost_energy_cap OR cost_om_annual OR cost_om_annual_investment_fraction OR cost_purchase OR cost_resource_area OR cost_resource_cap OR cost_storage_cap OR cost_export OR cost_om_con OR cost_om_prod"
        domain: Reals

objectives:
    min_cost_optimisation:
        equation: sum(cost[cost, node, tech] * objective_cost_class[cost], over=[cost in costs, node in nodes, tech in techs]) + $unmet_demand
        components:
            unmet_demand:
                - where: "run.ensure_feasibility=True"
                  expression: >
                    sum(
                        unmet_demand[carrier, node, timestep] - unused_supply[carrier, node, timestep] * timestep_weights[timestep],
                        over=[carrier in carriers, node in nodes, timestep in timesteps]
                    ) * bigM
                - where: "NOT run.ensure_feasibility=True"
                  expression: "0"
        domain: Reals
        sense: minimize
