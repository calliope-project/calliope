model:
    name: Cost capacity constraint test model
    timeseries_data_path: 'timeseries_data'
    subset_time: '2005-01-01'

run:
    mode: plan
    solver: cbc

techs:
    cheap_polluting_supply:
        essentials:
            name: 'Cheap but polluting supply'
            parent: supply
            carrier: electricity
        constraints:
            lifetime: 25
            energy_cap_max: .inf
        costs:
            monetary:
                interest_rate: 0.1
                energy_cap: 1000
                om_prod: 1
            emissions:
                om_prod: 2

    expensive_clean_supply:
        essentials:
            name: 'Expensive but clean supply'
            parent: supply
            carrier: electricity
        constraints:
            lifetime: 25
            energy_cap_max: .inf
        costs:
            monetary:
                interest_rate: 0.1
                energy_cap: 2000
                om_prod: 2
            emissions:
                om_prod: 1

    mean_supply:
        essentials:
            name: 'Mean supply'
            parent: supply
            carrier: electricity
        constraints:
            lifetime: 25
            energy_cap_max: .inf
        costs:
            monetary:
                interest_rate: 0.1
                energy_cap: 1500
                om_prod: 1.5
            emissions:
                om_prod: 1.5

    electricity_demand:
        essentials:
            name: Electricity demand
            carrier: electricity
            parent: demand
        constraints:
            resource: file=demand_elec.csv

locations:
    0,1:
        techs: {cheap_polluting_supply, expensive_clean_supply, mean_supply, electricity_demand}

overrides:
    illegal_string_cost_class:
        run.objective_options.cost_class: 'monetary'
    empty_cost_class:
        run.objective_options.cost_class: {}
    emissions_objective_without_removing_monetary_default:
        run.objective_options.cost_class: {'emissions': 0.1}
    monetary_objective:
        run.objective_options.cost_class: {'monetary': 1}
    emissions_objective:
        run.objective_options.cost_class: {'monetary': 0, 'emissions': 1}
    weighted_objective:
        run.objective_options.cost_class: {'monetary': 0.9, 'emissions': 0.1}
    undefined_class_objective:
        run.objective_options.cost_class: {'monetary': 0.8, 'emissions': 0.1, 'random_class': 0.2}
