# This file contains overrides for model.yaml

##
# WARNING: When adding tests for new constraints, we now
# want to create separate models, as in the example of
# `model_demand_share.yaml`, which can double as minimal
# working examples of the given functionality.
##

overrides:
  simple_supply:
    nodes:
      a:
        techs:
          test_supply_elec:

      b:
        techs:
          test_supply_elec:

  simple_supply_locations:
    locations:
      a:
        inherit: init_nodes
        techs:
          test_supply_elec:

      b:
        inherit: init_nodes
        techs:
          test_supply_elec:

  simple_supply_plus: # does not have a solution
    nodes:
      a:
        techs:
          test_supply_plus:
            source_max: file=supply_plus_resource.csv

      b:
        techs:
          test_supply_plus:
            source_max: file=supply_plus_resource.csv

  simple_supply_and_supply_plus:
    nodes:
      a:
        techs:
          test_supply_elec:
          test_supply_plus:
            source_max: file=supply_plus_resource.csv

      b:
        techs:
          test_supply_elec:
          test_supply_plus:
            source_max: file=supply_plus_resource.csv

  supply_and_supply_plus_milp:
    nodes:
      a:
        techs:
          test_supply_elec:
          test_supply_plus:
            source_max: file=supply_plus_resource.csv
            cap_method: integer
            units_max: 1
            flow_cap_per_unit: 15
            storage_cap_per_unit: 15
            cost_purchase:
              data: 1
              index: monetary
              dims: costs
            cost_flow_cap:
              data: 0
              index: monetary
              dims: costs

    tech_groups.test_transmission.active: false

  supply_purchase:
    nodes:
      a:
        techs:
          test_supply_elec:
            cap_method: binary
            cost_purchase:
              data: 1
              index: monetary
              dims: costs
            cost_flow_cap:
              data: 0
              index: monetary
              dims: costs

    tech_groups.test_transmission.active: false

  supply_milp:
    techs:
      test_supply_elec:
        cap_method: integer
        units_max: 1
        flow_cap_per_unit: 15
    nodes:
      a:
        techs:
          test_supply_elec:
      b.active: false
    tech_groups.test_transmission.active: false

  supply_export:
    techs:
      test_supply_elec:
        carrier_carrier: electricity
        cost_export:
          data: 0.01
          index: monetary
          dims: costs
    nodes:
      a:
        techs:
          test_supply_elec:

      b:
        techs:
          test_supply_elec:

  simple_conversion:
    nodes:
      a:
        techs:
          test_supply_elec:
          test_supply_gas:
          test_conversion:
          test_demand_heat:
            sink_equals: file=demand_heat.csv

      b:
        techs:
          test_supply_elec:
          test_supply_gas:
          test_conversion:
          test_demand_heat:
            sink_equals: file=demand_heat.csv

  conversion_and_conversion_plus:
    nodes:
      a:
        techs:
          test_supply_elec:
          test_supply_gas:
          test_supply_coal:
          test_conversion:
          test_conversion_plus:
          test_demand_heat:
            sink_equals: file=demand_heat.csv

    tech_groups.test_transmission.active: false

  conversion_plus_milp:
    techs:
      test_conversion_plus:
        cap_method: integer
        units_max: 2
        flow_cap_per_unit: 15
    nodes:
      a:
        techs:
          test_supply_elec:
          test_supply_gas:
          test_conversion_plus:
          test_demand_heat:
            sink_equals: file=demand_heat.csv

    tech_groups.test_transmission.active: false

  conversion_milp:
    techs:
      test_conversion:
        cap_method: integer
        units_max: 1
        flow_cap_per_unit: null
    nodes:
      a:
        techs:
          test_supply_elec:
          test_supply_gas:
          test_conversion:
          test_demand_heat:
            sink_equals: file=demand_heat.csv

    tech_groups.test_transmission.active: false

  conversion_plus_purchase:
    nodes:
      a:
        techs:
          test_supply_elec:
          test_supply_gas:
          test_conversion_plus:
            cap_method: binary
            cost_purchase:
              data: 1
              index: monetary
              dims: costs
          test_demand_heat:
            sink_equals: file=demand_heat.csv

    tech_groups.test_transmission.active: false

  simple_conversion_plus:
    nodes:
      a:
        techs:
          test_supply_elec:
          test_supply_gas:
          test_supply_coal:
          test_conversion_plus:
          test_demand_heat:
            sink_equals: file=demand_heat.csv

    tech_groups.test_transmission.active: false

  simple_chp:
    nodes:
      a:
        techs:
          test_supply_elec:
          test_supply_gas:
          test_chp:
          test_demand_heat:
            sink_equals: file=demand_heat.csv

    tech_groups.test_transmission.active: false

  fuel_distribution:
    techs:
      test_conversion:
        carrier_in: [gas, coal]
        carrier_out: electricity
    nodes:
      a:
        techs:
          test_conversion:
            cost_flow_in:
              data: [1, 2]
              index: [[monetary, coal], [monetary, gas]]
              dims: [costs, carriers]

    node_groups:
      init_nodes:
        techs:
          test_demand_elec:
            sink_equals: file=demand_elec.csv
          test_supply_gas:
          test_supply_coal:
          test_conversion:
          test_demand_coal:

    tech_groups.test_transmission.active: false

  simple_storage:
    nodes:
      a:
        techs:
          test_supply_elec:
          test_storage:

      b:
        techs:
          test_supply_elec:
          test_storage:

  storage_discharge_depth:
    techs:
      test_storage:
        storage_discharge_depth: 0.8

  storage_milp:
    nodes:
      a:
        techs:
          test_supply_elec:
          test_storage:
            cap_method: integer
            units_max: 2
            flow_cap_per_unit: 10
            storage_cap_per_unit: 15

    tech_groups.test_transmission.active: false

  storage_purchase:
    nodes:
      a:
        techs:
          test_supply_elec:
          test_storage:
            cap_method: binary
            cost_purchase:
              data: 1
              index: monetary
              dims: costs

    tech_groups.test_transmission.active: false

  spores:
    config:
      build.mode: spores
      solve:
        spores_score_cost_class: "spores_score"
        spores_number: 3
      parameters:
        spores_slack: 0.1
        objective_cost_weights:
          data: [1, 0]
          index: ["monetary", "spores_score"]

    techs.test_supply_elec:
      cost_flow_cap:
        data: [10, 0]
        index: [monetary, spores_score]
        dims: costs
      cost_interest_rate:
        data: [0.1, 0]
        index: [monetary, spores_score]
        dims: costs
      lifetime: 1

  empty_tech_node:
    nodes.c.techs:
  one_day:
    config.init.time_subset: ["2005-01-01", "2005-01-01"]

  two_hours:
    config.init.time_subset: ["2005-01-01 00:00:00", "2005-01-01 01:00:00"]

  resample_two_days:
    config:
      init:
        time_subset: ["2005-01-01", "2005-01-02"]
        time_resample: 24h

  operate:
    config.build.mode: operate
    config.init.time_subset: ["2005-01-01", "2005-01-04"]
    config.solve.operate_window: 12
    config.solve.operate_horizon: 24

  investment_costs:
    tech_groups:
      test_controller:
        lifetime: 25
        cost_interest_rate:
          data: 0.1
          index: monetary
          dims: costs
        cost_flow_cap:
          data: 10
          index: monetary
          dims: costs

  demand_elec_max:
    node_groups.init_nodes.techs:
      test_demand_elec:
        sink_equals: null
        sink_max: file=demand_elec.csv
