config:
  init:
    name: Cost capacity constraint test model
    timeseries_data_path: "timeseries_data"
    subset_time: ["2005-01-01", "2005-01-01"]
  build:
    mode: plan
  solve:
    solver: cbc

techs:
  cheap_polluting_supply:
    essentials:
      name: "Cheap but polluting supply"
      parent: supply
      carrier: electricity
    constraints:
      lifetime: 25
      flow_cap_max: .inf
    costs:
      monetary:
        interest_rate: 0.1
        flow_cap: 1000
        om_prod: 1
      emissions:
        om_prod: 2

  expensive_clean_supply:
    essentials:
      name: "Expensive but clean supply"
      parent: supply
      carrier: electricity
    constraints:
      lifetime: 25
      flow_cap_max: .inf
    costs:
      monetary:
        interest_rate: 0.1
        flow_cap: 2000
        om_prod: 2
      emissions:
        om_prod: 1

  mean_supply:
    essentials:
      name: "Mean supply"
      parent: supply
      carrier: electricity
    constraints:
      lifetime: 25
      flow_cap_max: .inf
    costs:
      monetary:
        interest_rate: 0.1
        flow_cap: 1500
        om_prod: 1.5
      emissions:
        om_prod: 1.5

  electricity_demand:
    essentials:
      name: Electricity demand
      carrier: electricity
      parent: demand
    constraints:
      sink_equals: file=demand_elec.csv

nodes:
  a,b:
    techs:
      {
        cheap_polluting_supply,
        expensive_clean_supply,
        mean_supply,
        electricity_demand,
      }

overrides:
  illegal_string_cost_class:
    parameters.objective_cost_class.data: "monetary"
  emissions_objective_without_removing_monetary_default:
    parameters.objective_cost_class:
      data: 0.1
      index: ["emissions"]
  monetary_objective:
    parameters.objective_cost_class:
      data: 1
      index: ["monetary"]
  emissions_objective:
    parameters.objective_cost_class:
      data: [0, 1]
      index: [monetary, emissions]
  weighted_objective:
    parameters.objective_cost_class:
      data: [0.9, 0.1]
      index: [monetary, emissions]
  undefined_class_objective:
    parameters.objective_cost_class:
      data: [0.8, 0.1, 0.2]
      index: ["monetary", "emissions", "random_class"]
