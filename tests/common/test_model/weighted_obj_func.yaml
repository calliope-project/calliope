config:
  init:
    name: Cost capacity constraint test model
    time_data_path: "timeseries_data"
    time_subset: ["2005-01-01", "2005-01-01"]
  build:
    mode: plan
  solve:
    solver: cbc

techs:
  cheap_polluting_supply:
    name: "Cheap but polluting supply"
    parent: supply
    carrier_out: electricity
    lifetime: 25
    flow_cap_max: .inf
    cost_interest_rate:
      data: 0.1
      index: monetary
      dims: costs
    cost_flow_cap:
      data: 1000
      index: monetary
      dims: costs
    cost_flow_out:
      data: [1, 2]
      index: [monetary, emissions]
      dims: costs

  expensive_clean_supply:
    name: "Expensive but clean supply"
    parent: supply
    carrier_out: electricity
    lifetime: 25
    flow_cap_max: .inf
    cost_interest_rate:
      data: 0.1
      index: monetary
      dims: costs
    cost_flow_cap:
      data: 2000
      index: monetary
      dims: costs
    cost_flow_out:
      data: [2, 1]
      index: [monetary, emissions]
      dims: costs

  mean_supply:
    name: "Mean supply"
    parent: supply
    carrier_out: electricity
    lifetime: 25
    flow_cap_max: .inf
    cost_interest_rate:
      data: 0.1
      index: monetary
      dims: costs
    cost_flow_cap:
      data: 1500
      index: monetary
      dims: costs
    cost_flow_out:
      data: [1.5, 1.5]
      index: [monetary, emissions]
      dims: costs

  electricity_demand:
    name: Electricity demand
    carrier_in: electricity
    parent: demand
    sink_equals: file=demand_elec.csv

node_groups:
  node_techs:
    techs:
      cheap_polluting_supply:
      expensive_clean_supply:
      mean_supply:
      electricity_demand:

nodes:
  a:
    inherit: node_techs
  b:
    inherit: node_techs

overrides:
  illegal_string_cost_class:
    parameters.objective_cost_weights.data: "monetary"
  emissions_objective_without_removing_monetary_default:
    parameters.objective_cost_weights:
      data: 0.1
      index: ["emissions"]
  monetary_objective:
    parameters.objective_cost_weights:
      data: 1
      index: ["monetary"]
  emissions_objective:
    parameters.objective_cost_weights:
      data: [0, 1]
      index: [monetary, emissions]
  weighted_objective:
    parameters.objective_cost_weights:
      data: [0.9, 0.1]
      index: [monetary, emissions]
  undefined_class_objective:
    parameters.objective_cost_weights:
      data: [0.8, 0.1, 0.2]
      index: ["monetary", "emissions", "random_class"]
