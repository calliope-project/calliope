trigger:
  - master
  - "*"

pr:
  - master

pool:
  vmImage: $(IMAGE_NAME)

strategy:
  maxParallel: 8
  matrix:
    linux-py3.8:
      IMAGE_NAME: ubuntu-latest
      PYTHON_VERSION: 3.8
    linux-py3.9:
      IMAGE_NAME: ubuntu-latest
      PYTHON_VERSION: 3.9
      CODECOV: True  # Only run on one build
    macos-py3.9:
      IMAGE_NAME: macOS-latest
      PYTHON_VERSION: 3.9
    windows-py3.9:
      IMAGE_NAME: windows-latest
      PYTHON_VERSION: 3.9

steps:
  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Enable conda (UNIX)
    condition: ne( variables['Agent.OS'], 'Windows_NT' )

  - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    displayName: Enable conda (Windows)
    condition: eq( variables['Agent.OS'], 'Windows_NT' )

  - task: Cache@2
    displayName: Use cached Anaconda environment
    inputs:
      key: 'conda | "$(Agent.OS)" | requirements.yml'
      restoreKeys: |
        python | "$(Agent.OS)"
        python
      path: $(CONDA)/envs/calliope
      cacheHitVar: CONDA_CACHE_RESTORED

  - powershell: |
      wget https://www.coin-or.org/download/binary/Cbc/Cbc-2.10-win64-msvc15-md.zip -O cbc.zip
      7z x cbc.zip -ocbc
    displayName: Download and set path for CBC (Windows)
    condition: eq( variables['Agent.OS'], 'Windows_NT' )

  - bash: sudo chown -R $USER $CONDA
    displayName: Take ownership of conda installation (macOS)
    condition: eq( variables['Agent.OS'], 'Darwin' )

  - bash: |
      conda config --set always_yes yes --set changeps1 no
      conda update -q conda
      conda info -a
    displayName: Configure and update conda

  - bash: |
      conda config --add channels conda-forge
      conda create --yes --quiet -n calliope python=$(PYTHON_VERSION)
      conda env update --file requirements.yml --name calliope
    displayName: Set up environment
    condition: eq(variables.CONDA_CACHE_RESTORED, 'false')

  - bash: |  # cbc -quit may be required to make sure that cbc is 'reset' such that its timeout time fits within pyomo's strict limit (see: https://github.com/Pyomo/pyomo/issues/2102)
      conda install --yes -n calliope coin-or-cbc
    displayName: Install coincbc (UNIX)
    condition: and(ne(variables['Agent.OS'], 'Windows_NT'), eq(variables.CONDA_CACHE_RESTORED, 'false'))

  - bash: |
      source activate calliope
      pip install --no-cache-dir --verbose -e .
      cbc -quit
      py.test -n 2 --junitxml=junit/test-results.xml --cov=calliope --cov-report=term-missing --cov-report=xml -W ignore::FutureWarning
    displayName: Install calliope and run tests (UNIX)
    condition: ne( variables['Agent.OS'], 'Windows_NT' )

  - script: |
      set PATH=cbc/bin;%PATH%
      call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x86
      call activate calliope
      pip install --no-cache-dir --verbose -e .
      py.test -n 2 --junitxml=junit/test-results.xml --cov=calliope --cov-report=term-missing --cov-report=xml -W ignore::FutureWarning
    displayName: Install calliope and run tests (Windows)
    condition: eq( variables['Agent.OS'], 'Windows_NT' )

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-*.xml'
      testRunTitle: '$(Agent.JobName)'

  - task: PublishCodeCoverageResults@1
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'

  - bash: |
      source activate calliope
      codecov
    displayName: Send results to Codecov
    condition: eq( variables['CODECOV'], 'True' )
    env:
      CODECOV_TOKEN: $(CodecovToken)
