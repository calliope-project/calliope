$schema: http://json-schema.org/draft-07/schema#
title: All options available to formulate math to use in solving an optimisation problem with Calliope.
additionalProperties: false
properties:
  constraints:
    type: object
    description: All constraints to apply to the optimisation problem.
    additionalProperties: false
    patternProperties:
      '[^\d^_\W][\w\d]+':
        type: object
        description: A named constraint
        additionalProperties: false
        required: ["equations"]
        properties:
          description: &description
            type: string
            description: A verbose description of the component.
          active: &active
            type: boolean
            description: If False, this component will be ignored entirely at the optimisation problem build phase.
          foreach: &foreach
            type: array
            description: sets (a.k.a. dimensions) of the model over which the math formulation component will be built.
            uniqueItems: true
            items:
              type: string
              description: Calliope set name (e.g., "techs", "nodes")
          where: &top_level_where
            type: string
            description: Top-level condition to determine whether the component exists in this optimisation problem (at all, if `foreach` is not given, or for specific index items within the product of the sets given by `foreach`)
          equations:
            type: array
            description: Constraint math equations with conditions defining on which index items in the product of `foreach` sets they will be applied. Conditions must be set up such that a maximum of one equation can be applied per index item. Equations are of the form LHS OPERATOR RHS, where LHS and RHS are math expressions and OPERATOR is one of [==, <=, >=].
            items: &equation_items
              type: object
              additionalProperties: false
              required: ["expression"]
              properties:
                where:
                  type: string
                  description: Condition to determine whether the accompanying expression is built (at all, if `foreach` is not given, or for specific index items within the product of the sets given by `foreach`).
                expression:
                  type: string
                  description: Equation expression valid for this component type (see component `equations` description).
          sub_expressions: &sub_expressions
            type: object
            description: Math sub-expressions which are used to replace any instances in which they are referenced in the component equation(s). Sub-expressions are referenced by their name preceded with the "$" symbol, e.g., `foo` in `$foo == 1` or `$foo + 1`.
            additionalProperties: false
            patternProperties:
              '[^\d^_\W][\w\d]+':
                type: array
                description: Named sub-expression.
                items:
                  type: object
                  additionalProperties: false
                  required: ["expression"]
                  properties:
                    where:
                      type: string
                      description: Condition to determine whether the accompanying sub-expression is built.
                    expression:
                      type: string
                      description: math equation sub-expression which can be one term or a combination of terms using the operators [+, -, *, /, **].
          slices: &slices
            type: object
            description: Array index slices which are used to replace any instances in which they are referenced in decision variables/parameters/global expressions in the component equation(s) or sub-expressions. Index slices are referenced by their name preceded with the "$" symbol, e.g., `foo` in `flow_out_eff[techs=$foo]`.
            additionalProperties: false
            patternProperties:
              '[^\d^_\W][\w\d]+':
                type: array
                description: Named Index slice.
                items:
                  type: object
                  additionalProperties: false
                  required: ["expression"]
                  properties:
                    where:
                      type: string
                      description: Condition to determine whether the accompanying index slice is built.
                    expression:
                      type: string
                      description: Index slice expression, such as a list of set items or a call to a helper function.

  global_expressions:
    type: object
    description: >-
      Definition of global expressions that can be used to combine parameters and variables and then used in one or more expressions elsewhere in the math formulation (i.e., in constraints, objectives, and other global expressions).
      NOTE: If expecting to use global expression `A` in global expression `B`, `A` must be defined above `B`.
    additionalProperties: false
    patternProperties:
      '[^\d^_\W][\w\d]+':
        type: object
        description: A named global expression.
        additionalProperties: false
        required: ["equations"]
        properties:
          description: *description
          active: *active
          unit: &unit
            type: string
            description: Generalised unit of the component (e.g., length, time, quantity_per_hour, ...)
          foreach: *foreach
          where: *top_level_where
          equations:
            type: array
            description: Math equation expressions with conditions defining on which index items in the product of `foreach` sets they will be applied. Conditions must be set up such that a maximum of one equation expression can be applied per index item. Equation expression combining terms with the operators [+, -, *, /, **].
            items: *equation_items
          sub_expressions: *sub_expressions
          slices: *slices

  variables:
    type: object
    description: Decision variables to include in the optimisation problem. A decision variable must be referenced in at least one constraint or in the objective for it to exist in the optimisation problem that is sent to the solver.
    additionalProperties: false
    patternProperties:
      '[^\d^_\W][\w\d]+':
        type: object
        description: A named variable.
        additionalProperties: false
        properties:
          description: *description
          active: *active
          unit: *unit
          foreach: *foreach
          where: *top_level_where
          domain:
            type: string
            description: Allowed values that the decision variable can take (either integer or continuous, a.k.a. real, values)
            enum: [real, integer]
          bounds:
            type: object
            description: Upper and lower bounds of the decision variable, either derived per-index item from a multi-dimensional input parameter, or given as a single value that is applied across all decision variable index items.
            additionalProperties: false
            properties:
              min:
                type: [string, number]
                description: Decision variable lower bound, either as a reference to an input parameter or as a number.
              max:
                type: [string, number]
                description: Decision variable upper bound, either as a reference to an input parameter or as a number.

  objectives:
    type: object
    description: Possible objectives to apply to the optimisation problem. Only one objective, the one referenced in model configuration `run.objective` will be activated for the optimisation problem.
    additionalProperties: false
    patternProperties:
      '[^\d^_\W][\w\d]+':
        type: object
        description: A named variable.
        additionalProperties: false
        required: ["equations"]
        properties:
          description: *description
          active: *active
          equations:
            type: array
            description: Math equation expressions with conditions to determinee which expression will be applied for this objectives. Conditions must be set up such that only one equation expression can be applied for this objective.
            items: *equation_items
          sub_expressions: *sub_expressions
          slices: *slices
          sense:
            type: string
            description: Whether the objective function should be minimised or maximised in the optimisation.
            enum: [minimise, maximise, minimize, maximize]
