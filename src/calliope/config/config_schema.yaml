
# yaml-language-server: $schema=https://json-schema.org/draft/2020-12/schema#

$schema: "https://json-schema.org/draft/2020-12/schema"
title: Model configuration schema
description: All configuration options when calling Calliope models.
type: object
additionalProperties: false
properties:
  config:
    type: object
    description: All configuration options used for a Calliope model
    additionalProperties: false
    properties:
      init:
        type: object
        description: All configuration options used when initialising a Calliope model
        additionalProperties: false
        properties:
          name:
            type: ["null", string]
            default: null
            description: Model name
          calliope_version:
            type: ["null", string]
            default: null
            description: Calliope framework version this model is intended for
          time_subset:
            oneOf:
              - type: "null"
              - type: array
                minItems: 2
                maxItems: 2
                items:
                  type: string
                  description: ISO8601 format datetime strings of the form `YYYY-mm-dd HH:MM:SS` (e.g, '2005-01', '2005-01-01', '2005-01-01 00:00', ...)
            default: null
            description: >-
              Subset of timesteps as an two-element list giving the **inclusive** range.
              For example, ['2005-01', '2005-04'] will create a time subset from '2005-01-01 00:00:00' to '2005-04-31 23:59:59'.
          time_resample:
            type: ["null", string]
            default: null
            description: setting to adjust time resolution, e.g. "2h" for 2-hourly
            pattern: "^[0-9]+[a-zA-Z]"
          time_cluster:
            type: ["null", string]
            default: null
            description: setting to cluster the timeseries, must be a path to a file where each date is linked to a representative date that also exists in the timeseries.
          time_format:
            type: string
            default: "ISO8601"
            description: Timestamp format of all time series data when read from file. "ISO8601" means "%Y-%m-%d %H:%M:%S".
          add_math:
            type: array
            default: []
            description: List of references to files which contain additional mathematical formulations to be applied on top of the base math.
            uniqueItems: true
            items:
              type: string
              description: >
                If referring to an pre-defined Calliope math file (see documentation for available files), do not append the reference with ".yaml".
                If referring to your own math file, ensure the file type is given as a suffix (".yaml" or ".yml").
                Relative paths will be assumed to be relative to the model definition file given when creating a calliope Model (`calliope.Model(model_definition=...)`)
          distance_unit:
            type: string
            default: km
            description: >-
              Unit of transmission link `distance` (m - metres, km - kilometres).
              Automatically derived distances from lat/lon coordinates will be given in this unit.
            enum: [m, km]

      build:
        type: object
        description: >
          All configuration options used when building a Calliope optimisation problem (`calliope.Model.build`).
          Additional configuration items will be passed onto math string parsing and can therefore be accessed in the `where` strings by `config.[item-name]`, where "[item-name]" is the name of your own configuration item.
        additionalProperties: true
        properties:
          backend:
            type: string
            default: pyomo
            description: Module with which to build the optimisation problem
          ensure_feasibility:
            type: boolean
            default: false
            description: >
              whether to include decision variables in the model which will meet unmet demand or consume unused supply in the model so that the optimisation solves successfully.
              This should only be used as a debugging option (as any unmet demand/unused supply is a sign of improper model formulation).
          mode:
            type: string
            default: plan
            description: Mode in which to run the optimisation.
            enum: [plan, spores, operate]
          objective:
            type: string
            default: min_cost_optimisation
            description: Name of internal objective function to use, from those defined in the pre-defined math and any applied additional math.
          operate_window:
            type: string
            description: >-
              Operate mode rolling `window`, given as a pandas frequency string.
              See [here](https://pandas.pydata.org/docs/user_guide/timeseries.html#offset-aliases) for a list of frequency aliases.
          operate_horizon:
            type: string
            description: >-
              Operate mode rolling `horizon`, given as a pandas frequency string.
              See [here](https://pandas.pydata.org/docs/user_guide/timeseries.html#offset-aliases) for a list of frequency aliases.
              Must be â‰¥ `operate_window`
          operate_use_cap_results:
            type: boolean
            default: false
            description: If the model already contains `plan` mode results, use those optimal capacities as input parameters to the `operate` mode run.

      solve:
        type: object
        description: All configuration options used when solving a Calliope optimisation problem (`calliope.Model.solve`).
        additionalProperties: false
        properties:
          spores_number:
            type: integer
            default: 3
            description: SPORES mode number of iterations after the initial base run.
          spores_score_cost_class:
            type: string
            default: spores_score
            description: SPORES mode cost class to vary between iterations after the initial base run.
          spores_slack_cost_group:
            type: string
            description: SPORES mode cost class to keep below the given `slack` (usually "monetary").
          spores_save_per_spore:
            type: boolean
            default: false
            description: Whether or not to save the result of each SPORES mode run between iterations. If False, will consolidate all iterations into one dataset after completion of N iterations (defined by `spores_number`) and save that one dataset.
          spores_save_per_spore_path:
            type: string
            description: If saving per spore, the path to save to.
          spores_skip_cost_op:
            type: boolean
            default: false
            description: If the model already contains `plan` mode results, use those as the initial base run results and start with SPORES iterations immediately.
          save_logs:
            type: ["null", string]
            default: null
            description: If given, should be a path to a directory in which to save optimisation logs.
          solver_io:
            type: ["null", string]
            default: null
            description: >
              Some solvers have different interfaces that perform differently.
              For instance, setting `solver_io="python"` when using the solver `gurobi` tends to reduce the time to send the optimisation problem to the solver.
          solver_options:
            type: ["null", object]
            default: null
            description: Any solver options, as key-value pairs, to pass to the chosen solver
          solver:
            type: string
            default: cbc
            description: Solver to use. Any solvers that have Pyomo interfaces can be used. Refer to the Pyomo documentation for the latest list.
          zero_threshold:
            type: number
            default: 1e-10
            description: On postprocessing the optimisation results, values smaller than this threshold will be considered as optimisation artefacts and will be set to zero.
          shadow_prices:
            type: array
            uniqueItems: true
            items:
              type: string
              description: Names of model constraints.
            default: []
            description: List of constraints for which to extract shadow prices. Shadow prices will be added as variables to the model results as `shadow_price_{constraintname}`.

  parameters:
    type: [object, "null"]
    description: >-
      Calliope model arbitrary parameter definitions.
      See the model definition schema for more guidance on content.
    additionalProperties: false
    patternProperties:
      '^[^_^\d][\w]*$': {}

  data_sources:
    type: [object, "null"]
    description: >-
      Reference to files from which to load parts (or all) of the model definition.
      Loaded data will be _overridden_ by any data provided in the YAML definitions.
      Conflicting data between loaded files will be resolved by overriding in the order the data is provided.
      That is, data in list item `N` takes precedence over data in list item `N-1`.
    additionalProperties: false
    patternProperties: &nested_pattern
      '^[^_^\d][\w]*$':
        type: object
        patternProperties:
          '^[^_^\d][\w]*$': {}

  techs:
    type: [object, "null"]
    description: >-
      Calliope model technology definitions.
      See the model definition schema for more guidance on content.
    additionalProperties: false
    patternProperties: *nested_pattern

  nodes:
    type: [object, "null"]
    description: >-
      Calliope model node definitions.
      See the model definition schema for more guidance on content.
    additionalProperties: false
    patternProperties: *nested_pattern

  templates:
    type: [object, "null"]
    description: >-
      Abstract technology/node templates from which techs/nodes can `inherit`.
      See the model definition schema for more guidance on content.
    additionalProperties: false
    patternProperties: *nested_pattern

  overrides:
    type: [object, "null"]
    description: >-
      Overrides to apply to _any_ part of the model YAML configuration / definition.
    additionalProperties: false
    patternProperties: *nested_pattern

  scenarios:
    type: [object, "null"]
    description: Groups of overrides to define named scenarios.
    additionalProperties: false
    patternProperties:
      '^[^_^\d][\w]*$':
        OneOf:
          - type: array
            items:
              type: string
              pattern: '^[^_^\d][\w]*$'
          - type: string
            pattern: '^[^_^\d][\w]*$'
