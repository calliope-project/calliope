
# yaml-language-server: $schema=https://json-schema.org/draft/2020-12/schema#

$schema: https://json-schema.org/draft/2020-12/schema#
title: Model definition schema
description: All options available to configure a Calliope model.
type: object
additionalProperties: false
$defs:
  unIndexedParamVal:
    type: [string, boolean, number, "null"]
    description: zero-dimensional (i.e., un-indexed) parameter.

  IndexedParamIndex:
    description: >-
      Model dimension members to apply the parameter value(s) to.
      If an array of arrays, sub-arrays must have same length as number of `dims`.
    oneOf:
      - type: [string, integer, number]
      - type: array
        uniqueItems: true
        minItems: 1
        items:
          oneOf:
            - type: array
              minItems: 1
              items:
                type: [string, integer, number]
            - type: [string, integer, number]

  IndexedParamData:
    description: >-
      parameter value(s).
      If data is one value, will be applied to all dimension members.
      If a list, must be same length as the index array.
    oneOf:
      - type: [string, boolean, integer, number, "null"]
      - type: array
        minItems: 1
        items:
          type: [string, boolean, integer, number, "null"]

  IndexedParam:
    type: object
    description: Indexed parameter.
    additionalProperties: false
    required: ["data", "index", "dims"]
    properties:
      data:
        $ref: "#/$defs/IndexedParamData"
      index:
        $ref: "#/$defs/IndexedParamIndex"
      dims:
        description: >-
          Model dimension(s) over which the parameter is indexed.
          Must be same length as the sub-arrays of `index` (if `indexed` does not have any sub-arrays or is simply a single value, `dims` must be of length 1).
        oneOf:
          - type: string
          - type: array
            uniqueItems: true
            minItems: 1
            items:
              type: string
  TechDims:
    dims:
      description: >-
        Model dimension(s) over which the parameter is indexed.
        Must be same length as the sub-arrays of `index` (if `indexed` does not have any sub-arrays or is simply a single value, `dims` must be of length 1).
        Cannot include `techs` or `nodes` as these will be added automatically in preprocessing.
      oneOf:
        - type: string
        - type: array
          uniqueItems: true
          minItems: 1
          items:
            type: string
            not:
              enum: [techs, nodes]

  TechCostDims:
    description: >-
      Model dimension(s) over which the parameter is indexed.
      Must be same length as the sub-arrays of `index` (if `indexed` does not have any sub-arrays or is simply a single value, `dims` must be of length 1).
      Cannot include `techs` or `nodes` as these will be added automatically in preprocessing.
      Must include `costs` as the string or as an element of the array.
    oneOf:
      - type: string
        enum: [costs]
      - type: array
        uniqueItems: true
        minItems: 1
        items:
          type: string
          not:
            enum: [techs, nodes]
        contains:
          const: costs

  TechParamNullNumber:
    oneOf:
      - type: ["null", number]
      - type: object
        description: Indexed tech-level parameter with null/numeric dtype.
        additionalProperties: false
        required: ["data", "index", "dims"]
        properties:
          data:
            description: >-
              parameter value(s).
              If data is one value, will be applied to all dimension members.
              If a list, must be same length as the index array.
            oneOf:
              - type: "null"
              - type: number
                minimum: 0
              - type: array
                minItems: 1
                items:
                  oneOf:
                    - type: "null"
                    - type: number
                      minimum: 0
          index:
            $ref: "#/$defs/IndexedParamIndex"
          dims:
            $ref: "#/$defs/TechDims"

  TechCostNullNumber:
    oneOf:
      - type: ["null", number]
        x-type: float
      - type: object
        description: Indexed tech-level cost.
        additionalProperties: false
        required: ["data", "index", "dims"]
        properties:
          data:
            description: >-
              parameter value(s).
              If data is one value, will be applied to all dimension members.
              If a list, must be same length as the index array.
            oneOf:
              - type: "null"
              - type: number
              - type: array
                minItems: 1
                items:
                  oneOf:
                    - type: "null"
                    - type: number
          index:
            $ref: "#/$defs/IndexedParamIndex"
          dims:
            $ref: "#/$defs/TechCostDims"

  ActiveDef:
    type: boolean
    title: Activated component.
    description:
      If false, the model component (tech/node/link) will not make its way through to preprocessing.
      If a node, links between this node and others, via transmission technologies, will also be deactivated.
    default: true

properties:
  parameters:
    type: object
    description: Calliope model arbitrary parameter definitions.
    additionalProperties: false
    properties:
      bigM:
        description: >-
          BigM is a large value used to define certain optimisation problems.
          See https://en.wikipedia.org/wiki/Big_M_method for more information.
          This value should be larger than the largest values that any decision variables can take, but should not be **too** large
          (i.e., do not set it greater than 3 orders of magnitude above the numeric range of the model).
          If too large, numerical problems may arise in the optimisation.
        default: 1e9
        x-type: float
        oneOf:
          - type: number
          - type: object
            additionalProperties: false
            properties:
              data:
                type: number
      objective_cost_weights:
        $ref: "#/$defs/TechCostNullNumber"
        default: 1
        x-type: float
        description: Weightings for cost classes to apply in the objective function.
    patternProperties:
      '^[^_^\d][\w]*$':
        oneOf:
          - $ref: "#/$defs/unIndexedParamVal"
          - $ref: "#/$defs/IndexedParam"

  techs:
    type: object
    description: Calliope model technology definitions.
    additionalProperties: false
    patternProperties:
      '^[^_^\d][\w]*$':
        type: object
        description: A named technology.
        allOf:
          - required: ["base_tech"]
          - oneOf:
            - required: ["base_tech", "carrier_in", "carrier_out"]
              not:
                required: ["to", "from"]
              properties:
                base_tech: {const: conversion}
            - required: ["base_tech", "carrier_in"]
              not:
                  required: ["carrier_out", "to", "from"]
              properties:
                base_tech: {const: demand}

            - required: ["base_tech", "carrier_in", "carrier_out"]
              not:
                required: ["to", "from"]
              properties:
                base_tech: {const: storage}

            - required: ["base_tech", "carrier_out"]
              not:
                  required: ["carrier_in", "to", "from"]
              properties:
                base_tech: {const: supply}

            - required: ["base_tech", "from", "to", "carrier_in", "carrier_out"]
              properties:
                base_tech: {const: transmission}
                from:
                  title: Starting node.
                  description: The resulting link technology will have `flow_out` == `import` and `flow_in` == `export` at this node.
                  type: string
                to:
                  title: Ending node.
                  description: The resulting link technology will have `flow_out` == `import` and `flow_in` == `export` at this node.
                  type: string

        patternProperties: &pattern_def
          '^(cost_[\w]+)$':
            $ref: "#/$defs/TechCostNullNumber"
        unevaluatedProperties: &uneval_def
          oneOf:
            - $ref: "#/$defs/unIndexedParamVal"
            - type: object
              description: Indexed tech-level parameter with any dtype.
              additionalProperties: false
              required: ["data", "index", "dims"]
              properties:
                data:
                  $ref: "#/$defs/IndexedParamData"
                index:
                  $ref: "#/$defs/IndexedParamIndex"
                dims:
                  $ref: "#/$defs/TechDims"

        properties:
          active:
            $ref: "#/$defs/ActiveDef"

          base_tech:
            type: string
            x-type: str
            enum: [demand, supply, conversion, storage, transmission]
            title: Abstract base technology name.
            description: Should be the name of one of the abstract base classes, from which some initial parameter defaults will be derived and with which certain base math will be triggered.

          color:
            type: ["null", string]
            default: .nan
            description: Color that can be used when plotting results.
            x-type: str
          carrier_in:
            description: >-
              Carrier(s) consumed by this technology.
              Only `transmission`, `conversion`, `storage`, and `demand` technologies can define this parameter
            x-type: float
            oneOf:
              - type: string
              - type: array
                uniqueItems: true
                minItems: 2
                items:
                  type: string
          carrier_out:
            description: >-
              Carrier(s) produced by this technology.
              Only `transmission`, `conversion`, `storage`, and `supply` technologies can define this parameter
            x-type: float
            oneOf:
              - type: string
              - type: array
                uniqueItems: true
                minItems: 2
                items:
                  type: string

          carrier_export:
            description: >-
              Carrier(s) produced by this technology that can be exported out of the system boundaries without having to go to a pre-defined `sink` (i.e., via a `demand` technology).
              Must be a subset of `carrier_out`.
            x-type: float
            oneOf:
              - type: string
              - type: array
                uniqueItems: true
                minItems: 2

          name:
            type: ["null", string]
            x-resample_method: first
            x-type: str
            title: Technology long-name.
            description: Long name of technology, which can be used in post-processing (e.g., plotting).
            default: .nan

          cap_method:
            type: string
            default: continuous
            x-resample_method: first
            x-type: str
            title: Capacity method switch.
            description: One of 'continuous' (LP model) or 'integer' (integer/binary unit capacity).
            enum: [continuous, integer]

          integer_dispatch:
            type: boolean
            default: false
            x-resample_method: first
            x-type: float
            title: Integer dispatch switch.
            description: |
              When true, will limit per-timestep out/inflows relative to the number of units of a technology that are in operation.
              Requires `cap_method=integer`.

          include_storage:
            type: boolean
            default: false
            x-resample_method: first
            x-type: float
            title: Storage method switch.
            description: When true, math will be triggered to allow discontinuous carrier inflow and outflows across timesteps.

          force_async_flow:
            type: boolean
            default: false
            x-resample_method: first
            x-type: float
            title: Force asynchronous out/inflow.
            description: If True, non-zero `flow_out` and `flow_in` cannot both occur in the same timestep.

          flow_cap_per_storage_cap_min:
            $ref: "#/$defs/TechParamNullNumber"
            default: 0
            x-type: float
            title: Minimum flow capacity per storage capacity
            description: >-
              ratio of minimum charge/discharge (kW) for a given storage capacity (kWh).
            x-unit: $\text{hour}^{-1}$

          flow_cap_per_storage_cap_max:
            $ref: "#/$defs/TechParamNullNumber"
            default: .inf
            x-type: float
            title: Maximum flow capacity per storage capacity
            description: >-
              ratio of maximum charge/discharge (kW) for a given storage capacity (kWh).
            x-unit: $\text{hour}^{-1}$

          flow_cap:
            $ref: "#/$defs/TechParamNullNumber"
            default: .inf
            x-type: float
            x-operate-param: true
            title: Rated flow capacity.
            description: >-
              Sets `flow_cap` to a parameter in operate mode.
              NOTE: this parameter cannot be used in `plan` mode as it clashes with the decision variable of the same name.
            x-unit: power.

          flow_cap_max:
            $ref: "#/$defs/TechParamNullNumber"
            default: .inf
            x-type: float
            title: Maximum rated flow capacity.
            description: >-
              Limits `flow_cap` to a maximum.
            x-unit: power.

          flow_cap_max_systemwide:
            $ref: "#/$defs/TechParamNullNumber"
            default: .inf
            x-type: float
            title: System-wide maximum rated flow capacity.
            description: >-
              Limits the sum of `flow_cap` over all nodes in the model to a maximum.
              If `cap_method=integer`, this will be scaled by the number of integer units of a technology purchased.
            x-unit: power or $\frac{\text{power}}{\text{unit}}$.

          flow_cap_min:
            $ref: "#/$defs/TechParamNullNumber"
            default: 0
            x-type: float
            title: Minimum rated flow capacity.
            description: >-
              This acts as lower limit (lower bound) for flow_cap.
              If `cap_method` = integer, this will be scaled by the number of integer units of a technology purchased.

              !!! note
                  If `cap_method` = continuous (which is set by default), then setting `flow_cap_min` to any value greater than 0 forces the model to always respect that limit, which in turn forces investment into the technology.
                  Use this to enforce given investment plans, or to account for existing technologies that cannot be decommissioned.

                  An example: If `cap_method` = continuous and `flow_cap_min` = 100, then flow_cap has to be at least 100.
                  This means that going to 0 is not possible, unless you switch to `cap_method` = integer (see [cap_method][]).

            x-unit: power or $\frac{\text{power}}{\text{unit}}$.

          flow_cap_min_systemwide:
            $ref: "#/$defs/TechParamNullNumber"
            default: 0
            x-type: float
            title: System-wide minimum rated flow capacity.
            description: >-
              Limits the sum of `flow_cap` over all nodes in the model to a minimum.
              NOTE: this will _force_ the sum of `flow_cap` to a minimum value unless `cap_method` is set to `integer`.
            x-unit: power.

          flow_out_min_relative:
            $ref: "#/$defs/TechParamNullNumber"
            default: 0
            x-type: float
            x-resample_method: mean
            title: Minimum outflow
            description: >-
              Set to a value between 0 and 1 to force minimum `flow_out` as a fraction of the technology rated capacity.
              If non-zero and `cap_method` is `continuous`, this will force the technology to operate above its minimum value at every timestep.
            x-unit: fraction.

          flow_cap_per_unit:
            $ref: "#/$defs/TechParamNullNumber"
            default: .nan
            x-type: float
            title: Flow capacity per purchased unit
            description: >-
              Set the capacity of each integer unit of a technology purchased, if `cap_method` is `integer`.
            x-unit: $\frac{\text{power}}{\text{unit}}$.

          flow_in_eff:
            $ref: "#/$defs/TechParamNullNumber"
            default: 1.0
            x-type: float
            x-resample_method: mean
            title: Inflow efficiency
            description: >-
              Conversion efficiency from `source`/`flow_in` (tech dependent) into the technology.
              Set as value between 1 (no loss) and 0 (all lost).
            x-unit: fraction.

          flow_out_eff:
            $ref: "#/$defs/TechParamNullNumber"
            default: 1.0
            x-type: float
            x-resample_method: mean
            title: Outflow efficiency
            description: >-
              Conversion efficiency from the technology to `sink`/`flow_out` (tech dependent).
              Set as value between 1 (no loss) and 0 (all lost).
            x-unit: fraction.

          flow_out_parasitic_eff:
            $ref: "#/$defs/TechParamNullNumber"
            default: 1.0
            x-type: float
            x-resample_method: mean
            title: Plant parasitic efficiency
            description: >-
              Additional losses as flow gets transferred from the plant to the carrier, e.g. due to plant parasitic consumption.
              Set as value between 1 (no loss) and 0 (all lost).
            x-unit: fraction.

          flow_ramping:
            $ref: "#/$defs/TechParamNullNumber"
            default: 1.0
            x-type: float
            title: Ramping rate
            description: >-
              limit maximum outflow / inflow / outflow - inflow (technology base class dependent) to a fraction of maximum capacity, which increases by that fraction at each timestep.
            x-unit: $\frac{\text{fraction}}{\text{hour}}$.

          export_max:
            $ref: "#/$defs/TechParamNullNumber"
            default: .inf
            x-type: float
            title: Maximum allowed carrier export
            description: >-
              If `carrier_export` is defined, limit the allowed export of produced carrier for a technology.
            x-unit: power.

          lifetime:
            type: ["null", number]
            default: .inf
            x-resample_method: mean
            x-type: float
            title: Technology lifetime
            description: >-
              Must be defined if fixed capital costs are defined.
              A reasonable value for many technologies is around 20-25 years.
            x-unit: years.

          area_use:
            $ref: "#/$defs/TechParamNullNumber"
            default: .inf
            x-type: float
            x-operate-param: true
            title: Area used.
            description: >-
              Sets `area_use` to a parameter in operate mode.
              NOTE: this parameter cannot be used in `plan` mode as it clashes with the decision variable of the same name.
            x-unit: $\text{area}^{2}$.

          area_use_max:
            $ref: "#/$defs/TechParamNullNumber"
            default: .inf
            x-type: float
            title: Maximum usable area.
            description: >-
              If set to a finite value, limits the upper bound of the `area_use` decision variable to this value.
            x-unit: $\text{area}^{2}$.

          area_use_min:
            $ref: "#/$defs/TechParamNullNumber"
            default: 0
            x-type: float
            title: Minimum usable area.
            description: >-
              Limits the lower bound of the `area_use` decision variable to this value.
            x-unit: $\text{area}^{2}$.

          area_use_per_flow_cap:
            $ref: "#/$defs/TechParamNullNumber"
            default: .nan
            x-type: float
            title: Area use per flow capacity
            description: >-
              If set, forces `area_use` to follow `flow_cap` with the given numerical ratio (e.g. setting to 1.5 means that `area_use == 1.5 * flow_cap`).
            x-unit: $\frac{\text{area}^{2}}{\text{power}}$.

          storage_cap:
            $ref: "#/$defs/TechParamNullNumber"
            default: .inf
            x-type: float
            x-operate-param: true
            title: Rated storage capacity.
            description: >-
              Sets `storage_cap` to a parameter in operate mode.
              NOTE: this parameter cannot be used in `plan` mode as it clashes with the decision variable of the same name.
            x-unit: $\text{area}^{2}$.

          storage_cap_max:
            $ref: "#/$defs/TechParamNullNumber"
            default: .inf
            x-type: float
            title: Maximum storage capacity.
            description: >-
              Limit upper bound of `storage_cap` decision variable.
            x-unit: energy.

          storage_cap_min:
            $ref: "#/$defs/TechParamNullNumber"
            default: 0
            x-type: float
            title: Minimum storage capacity.
            description: >-
              Limit lower bound of `storage_cap` decision variable.
            x-unit: energy.

          storage_cap_per_unit:
            $ref: "#/$defs/TechParamNullNumber"
            default: .nan
            x-type: float
            title: Storage capacity per purchased unit.
            description: >-
              Set the storage capacity of each integer unit of a technology purchased.
            x-unit: $\frac{\text{energy}}{\text{unit}}$.

          storage_discharge_depth:
            $ref: "#/$defs/TechParamNullNumber"
            default: 0
            x-resample_method: mean
            x-type: float
            title: Storage depth of discharge.
            description: >-
              Defines the minimum level of storage state of charge, as a fraction of total storage capacity.
            x-unit: fraction.

          storage_initial:
            $ref: "#/$defs/TechParamNullNumber"
            default: 0
            x-type: float
            title: Initial storage level.
            description: >-
              Set stored flow in device at the first timestep, as a fraction of total storage capacity.
            x-unit: fraction.

          storage_loss:
            $ref: "#/$defs/TechParamNullNumber"
            default: 0
            x-resample_method: mean
            x-type: float
            title: Storage loss rate
            description: >-
               Rate of storage loss per hour, used to calculate lost stored flow as `(1 - storage_loss)^hours_per_timestep`.
            x-unit: $\frac{\text{fraction}}{\text{hour}}$.

          cyclic_storage:
            type: boolean
            default: true
            x-type: float
            title: Cyclic storage switch.
            description: >
              If true, link storage levels in the last model timestep with the first model timestep.
              `inter_cluster_storage` custom math must be included if using time clustering and setting this to `true`.
              This must be set to `false` if using `operate` mode.
            x-unit: boolean.

          purchased_units_min_systemwide:
            $ref: "#/$defs/TechParamNullNumber"
            default: 0
            x-type: float
            title: System-wide minimum installed integer units of a technology.
            description: >-
              sets the lower bound of the sum across all nodes of the decision variable `units` for a particular technology.
            x-unit: integer.

          purchased_units_max_systemwide:
            $ref: "#/$defs/TechParamNullNumber"
            default: .inf
            x-type: float
            title: System-wide maximum installed integer units of a technology.
            description: >-
              sets the upper bound of the sum across all nodes of the decision variable `units` for a particular technology.
            x-unit: integer.

          purchased_units:
            $ref: "#/$defs/TechParamNullNumber"
            default: .inf
            x-type: float
            x-operate-param: true
            title: Number of purchased units.
            description: >-
              Sets `purchased_units` to a parameter in operate mode.
              NOTE: this parameter cannot be used in `plan` mode as it clashes with the decision variable of the same name.
            x-unit: integer

          purchased_units_min:
            $ref: "#/$defs/TechParamNullNumber"
            default: 0
            x-type: float
            title:  Minimum number of purchased units
            description: >-
              Limits the lower bound of units purchased if `cap_method` is `integer`.
            x-unit: integer.

          purchased_units_max:
            $ref: "#/$defs/TechParamNullNumber"
            default: .inf
            x-type: float
            title: Maximum number of purchased units.
            description: >-
              Limits the upper bound of units purchased if `cap_method` is `integer`.
              If set to `1`, will effectively set the `purchased_units` to a binary decision variable.
            x-unit: integer.

          sink_unit:
            type: string
            default: absolute
            x-resample_method: first
            x-type: str
            title: Sink unit
            description: >-
              Sets the unit of `Sink` to either `absolute` (unit: `energy`), `per_area` (unit: `energy/area`), or `per_cap` (unit: `energy/power`).
              `per_area` uses the `area_use` decision variable to scale the sink while `per_cap` uses the `flow_cap` decision variable.
            enum: [absolute, per_area, per_cap]

          sink_use_min:
            $ref: "#/$defs/TechParamNullNumber"
            default: 0
            x-resample_method: sum
            x-type: float
            title: Minimum bound on sink.
            description: >-
              Minimum sink use to remove a carrier from the system (e.g., electricity demand, transport distance).
              Unit dictated by `sink_unit`.

          sink_use_max:
            $ref: "#/$defs/TechParamNullNumber"
            default: .inf
            x-resample_method: sum
            x-type: float
            title: Maximum bound on sink.
            description: >-
              Maximum sink use to remove a carrier from the system (e.g., electricity demand, transport distance).
              Unit dictated by `sink_unit`.

          sink_use_equals:
            $ref: "#/$defs/TechParamNullNumber"
            default: .nan
            x-resample_method: sum
            x-type: float
            title: Required sink use.
            description: >-
              Required amount of carrier removal from the system (e.g., electricity demand, transport distance).
              Unit dictated by `sink_unit`.

          source_unit:
            type: string
            default: absolute
            x-resample_method: first
            x-type: str
            title: Source unit
            description: >-
              Sets the unit of `Source` to either `absolute` (unit: `energy`), `per_area` (unit: `energy/area`), or `per_cap` (unit: `energy/power`).
              `per_area` uses the `area_use` decision variable to scale the source while `per_cap` uses the `flow_cap` decision variable.
            enum: [absolute, per_area, per_cap]

          source_cap_equals_flow_cap:
            type: boolean
            default: false
            x-resample_method: first
            x-type: float
            title: Source capacity equals flow capacity.
            description: If true, the decision variables `source_cap` and `flow_cap` are forced to equal one another.

          source_eff:
            $ref: "#/$defs/TechParamNullNumber"
            default: 1.0
            x-resample_method: mean
            x-type: float
            title: Source inflow efficiency
            description: >-
              Conversion efficiency from the technology from `source`.
              Set as value between 1 (no loss) and 0 (all lost).
            x-unit: fraction.

          source_use_min:
            $ref: "#/$defs/TechParamNullNumber"
            default: 0
            x-resample_method: sum
            x-type: float
            title: Minimum bound on source.
            description: >-
              Minimum source use to add a carrier from the system (e.g., biofuel, coal, rainfall, wind flow).
              Unit dictated by `source_unit`.

          source_use_max:
            $ref: "#/$defs/TechParamNullNumber"
            default: .inf
            x-resample_method: sum
            x-type: float
            title: Maximum bound on sink.
            description: >-
              Maximum sink use to remove a carrier from the system (e.g., biofuel, coal, rainfall, wind flow).
              Unit dictated by `source_unit`.

          source_use_equals:
            $ref: "#/$defs/TechParamNullNumber"
            default: .nan
            x-resample_method: sum
            x-type: float
            title: Required sink use.
            description: >-
              Required amount of carrier removal from the system (e.g., biofuel, coal, rainfall, wind flow).
              Unit dictated by `source_unit`.

          source_cap:
            $ref: "#/$defs/TechParamNullNumber"
            default: .inf
            x-type: float
            x-operate-param: true
            title: Installed source consumption capacity.
            description: >-
              Sets `source_cap` to a parameter in operate mode.
              NOTE: this parameter cannot be used in `plan` mode as it clashes with the decision variable of the same name.
            x-unit: power.

          source_cap_max:
            type: number
            default: .inf
            x-resample_method: mean
            x-type: float
            title: Maximum installed source consumption capacity.
            description: >-
              Upper limit on `source_cap` decision variable.
            x-unit: power.

          source_cap_min:
            type: number
            default: 0
            x-resample_method: mean
            x-type: float
            title: Minimum installed source consumption capacity
            description: >-
              Lower limit on `source_cap` decision variable.
            x-unit: power.

          one_way:
            type: boolean
            default: false
            x-resample_method: first
            x-type: float
            title: One way transmission.
            description: Forces a transmission technology to only move flow in one direction on the link, i.e. from `from` to `to`.

          distance:
            type: ["null", number]
            default: 1.0
            x-resample_method: mean
            x-type: float
            title: Distance spanned by link.
            description: >-
              Used for `..._per_distance` constraints.
              If not defined, it will be automatically derived from latitude/longitude of nodes in a link.

          flow_in_eff_per_distance:
            $ref: "#/$defs/TechParamNullNumber"
            default: 1.0
            x-resample_method: mean
            x-type: float
            title: Inflow (i.e., export from node) efficiency per distance of transmission links.
            description: >-
              Total link efficiency will be calculated as $\text{flow\_in\_eff}\times{}\text{flow\_in\_eff\_per\_distance}^\text{distance}$.
              Set as value between 1 (no loss) and 0 (all lost).

          flow_out_eff_per_distance:
            $ref: "#/$defs/TechParamNullNumber"
            default: 1.0
            x-resample_method: mean
            x-type: float
            title: Outflow (i.e., import from node) efficiency per distance of transmission links.
            description: >-
              Total link efficiency will be calculated as $\text{flow\_out\_eff}\times{}\text{flow\_out\_eff\_per\_distance}^\text{distance}$.
              Set as value between 1 (no loss) and 0 (all lost).

          cost_flow_cap_per_distance:
            $ref: "#/$defs/TechCostNullNumber"
            default: 0
            x-type: float
            title: Cost of flow capacity, per unit distance
            description: >-
              Cost per unit of the decision variable `flow_cap` and per unit distance of a transmission link.
              Applied to transmission links only.
            x-unit: $(\text{power}\times\text{distance})^{-1}$

          cost_purchase_per_distance:
            $ref: "#/$defs/TechCostNullNumber"
            default: 0
            x-type: float
            title: Purchase cost per unit distance for transmission techs.
            description: >-
              Cost applied if the binary variable `purchased` is 1 or per unit of the integer variable `units`.
              Requires the parameter `cap_method` to be `integer`.
            x-unit: $(\text{purchased\_units}\times\text{distance})^{-1}$

          cost_flow_cap:
            $ref: "#/$defs/TechCostNullNumber"
            default: 0
            x-type: float
            title: Cost of flow capacity.
            description: >-
              Cost per unit of the decision variable `flow_cap`.
            x-unit: $\text{power}^{-1}$.

          cost_export:
            $ref: "#/$defs/TechCostNullNumber"
            default: 0
            x-resample_method: mean
            x-type: float
            title: Carrier export cost.
            description: >-
              Cost per unit of `flow_export` in each timestep.
              Usually used in the negative sense, as a subsidy.
            x-unit: $\text{energy}^{-1}$.

          cost_interest_rate:
            $ref: "#/$defs/TechCostNullNumber"
            default: 0
            x-type: float
            title: Interest rate.
            description: >-
              Used when computing levelized costs and technology depreciation_rate (relative to lifetime).
            x-unit: fraction

          cost_om_annual:
            $ref: "#/$defs/TechCostNullNumber"
            default: 0
            x-type: float
            title: Annual O&M costs
            description: >-
              Annual costs applied per unit `flow_cap`.
              These costs are not subject to being recalculated relative to technology lifetime, only scaled to reflect the fraction of one year that the model represents (e.g., 7 days ~= 0.02 of a year).
            x-unit: $\text{power}^{-1}$.

          cost_om_annual_investment_fraction:
            $ref: "#/$defs/TechCostNullNumber"
            default: 0
            x-type: float
            title: Fractional annual O&M costs.
            description: >-
              Add a fraction of the sum of all investment costs except `cost_om_annual` as an additional cost, to represent fixed annual O&M costs. Warning: the sum of all investment costs includes not just those associated with `flow_cap` but also others like those associated with `area_use`!
            x-unit: fraction / total investment.

          cost_flow_in:
            $ref: "#/$defs/TechCostNullNumber"
            default: 0
            x-resample_method: mean
            x-type: float
            title: Carrier inflow cost.
            description: >-
              Cost per unit of `flow_in` in each timestep.
            x-unit: $\text{energy}^{-1}$.

          cost_flow_out:
            $ref: "#/$defs/TechCostNullNumber"
            default: 0
            x-resample_method: mean
            x-type: float
            title: Carrier outflow cost
            description: >-
              Cost per unit of `flow_in` in each timestep.
            x-unit: $\text{energy}^{-1}$.

          cost_purchase:
            $ref: "#/$defs/TechCostNullNumber"
            default: 0
            x-type: float
            title: Purchase cost.
            description: >-
              Cost applied to the variable `purchased_units`.
              Requires the parameter `cap_method` to be `integer`.
            x-unit: $\text{purchased\_unit}^{-1}$

          cost_area_use:
            $ref: "#/$defs/TechCostNullNumber"
            default: 0
            x-type: float
            title: Cost of area use.
            description: >-
              Cost per unit `area_use`.
            x-unit: $\text{area}^{-2}$.

          cost_source_cap:
            $ref: "#/$defs/TechCostNullNumber"
            default: 0
            x-type: float
            title: Cost of source flow capacity.
            description: >-
              Cost per unit `source_cap`.
            x-unit: $\text{power}^{-1}$.

          cost_storage_cap:
            $ref: "#/$defs/TechCostNullNumber"
            default: 0
            x-type: float
            title: Cost of storage capacity.
            description: >-
              Cost per unit `storage_cap`, i.e., the maximum available capacity of the storage technology's "reservoir".
            x-unit: $\text{energy}^{-1}$.

          cost_depreciation_rate:
            $ref: "#/$defs/TechCostNullNumber"
            default: 1
            x-type: float
            title: Depreciation rate.
            description: >-
              Applied to "annualise" investment costs so they are comparable to variable costs.
              If not provided, this will be calculated using technology `lifetime` and `cost_interest_rate`.
            x-unit: fraction.

  nodes:
    type: object
    description: Calliope model node definitions.
    additionalProperties: false
    patternProperties:
      '^[^_^\d][\w]*$':
        type: object
        title: A named node.
        dependentRequired": {
          latitude: ["longitude"],
          longitude: ["latitude"]
        }

        patternProperties: *pattern_def
        unevaluatedProperties: *uneval_def
        properties:
          active:
            $ref: "#/$defs/ActiveDef"
          latitude:
            type: number
            x-type: float
            title: Latitude (WGS84 / EPSG4326).
            minimum: -90
            maximum: 90
          longitude:
            type: number
            x-type: float
            title: Longitude (WGS84 / EPSG4326).
            minimum: -180
            maximum: 180
          available_area:
            type: number
            x-type: float
            minimum: 0
            default: .inf
            x-resample_method: mean
