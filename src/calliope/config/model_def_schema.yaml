
# yaml-language-server: $schema=https://json-schema.org/draft/2020-12/schema#

$schema: https://json-schema.org/draft/2020-12/schema#
title: All options available to configure a Calliope model.
type: object
additionalProperties: false
$defs:
  StringFilePattern:
    type: string
    pattern: "^(file|df)=.+[:]*[\\w]*$"
  unIndexedParamVal:
    type: [string, boolean, number, "null"]
    description: zero-dimensional (i.e., un-indexed) parameter.

  IndexedParamIndex:
    description: >-
      Model dimension members to apply the parameter value(s) to.
      If an array of arrays, sub-arrays must have same length as number of `dims`.
    oneOf:
      - type: [string, integer, number]
      - type: array
        uniqueItems: true
        minItems: 1
        items:
          oneOf:
            - type: array
              minItems: 1
              items:
                type: [string, integer, number]
            - type: [string, integer, number]

  IndexedParamData:
    description: >-
      parameter value(s).
      If data is one value, will be applied to all dimension members.
      If a list, must be same length as the index array.
    oneOf:
      - type: [string, boolean, integer, number, "null"]
      - type: array
        minItems: 1
        items:
          type: [string, boolean, integer, number, "null"]

  IndexedParam:
    type: object
    description: Indexed parameter.
    additionalProperties: false
    required: ["data", "index", "dims"]
    properties:
      data:
        $ref: "#/$defs/IndexedParamData"
      index:
        $ref: "#/$defs/IndexedParamIndex"
      dims:
        description: >-
          Model dimension(s) over which the parameter is indexed.
          Must be same length as the sub-arrays of `index` (if `indexed` does not have any sub-arrays or is simply a single value, `dims` must be of length 1).
        oneOf:
          - type: string
          - type: array
            uniqueItems: true
            minItems: 1
            items:
              type: string
  TechDims:
    dims:
      description: >-
        Model dimension(s) over which the parameter is indexed.
        Must be same length as the sub-arrays of `index` (if `indexed` does not have any sub-arrays or is simply a single value, `dims` must be of length 1).
        Cannot include `techs` or `nodes` as these will be added automatically in preprocessing.
      oneOf:
        - type: string
        - type: array
          uniqueItems: true
          minItems: 1
          items:
            type: string
            not:
              enum: [techs, nodes]

  TechCostDims:
    description: >-
      Model dimension(s) over which the parameter is indexed.
      Must be same length as the sub-arrays of `index` (if `indexed` does not have any sub-arrays or is simply a single value, `dims` must be of length 1).
      Cannot include `techs` or `nodes` as these will be added automatically in preprocessing.
      Must include `costs`run.objective
    oneOf:
      - type: string
        enum: [costs]
      - type: array
        uniqueItems: true
        minItems: 1
        items:
          type: string
          not:
            enum: [techs, nodes]
        contains:
          const: costs

  TechParamNullNumberVariable:
    oneOf:
      - type: ["null", number]
      - $ref: "#/$defs/StringFilePattern"
      - type: object
        description: Indexed tech-level parameter with null/numeric dtype that allows loading a timeseries from file.
        additionalProperties: false
        required: ["data", "index", "dims"]
        properties:
          data:
            description: >-
              parameter value(s).
              If data is one value, will be applied to all dimension members.
              If a list, must be same length as the index array.
            oneOf:
              - type: "null"
              - type: number
                minimum: 0
              - $ref: "#/$defs/StringFilePattern"
              - type: array
                minItems: 1
                items:
                  oneOf:
                    - type: "null"
                    - type: number
                      minimum: 0
                    - $ref: "#/$defs/StringFilePattern"
          index:
            $ref: "#/$defs/IndexedParamIndex"
          dims:
            $ref: "#/$defs/TechDims"

  TechParamNullNumberFixed:
    oneOf:
      - type: ["null", number]
      - type: object
        description: Indexed tech-level parameter with null/numeric dtype that does not allow loading a timeseries from file.
        additionalProperties: false
        required: ["data", "index", "dims"]
        properties:
          data:
            description: >-
              parameter value(s).
              If data is one value, will be applied to all dimension members.
              If a list, must be same length as the index array.
            oneOf:
              - type: "null"
              - type: number
                minimum: 0
              - type: array
                minItems: 1
                items:
                  oneOf:
                    - type: "null"
                    - type: number
                      minimum: 0
          index:
            $ref: "#/$defs/IndexedParamIndex"
          dims:
            $ref: "#/$defs/TechDims"

  TechCostNullNumberFixed:
    oneOf:
      - type: ["null", number]
      - type: object
        description: Indexed tech-level cost that does not allow loading a timeseries from file.
        additionalProperties: false
        properties:
          data:
            description: >-
              parameter value(s).
              If data is one value, will be applied to all dimension members.
              If a list, must be same length as the index array.
            oneOf:
              - type: "null"
              - type: number
              - type: array
                minItems: 1
                items:
                  oneOf:
                    - type: "null"
                    - type: number
          index:
            $ref: "#/$defs/IndexedParamIndex"
          dims:
            $ref: "#/$defs/TechCostDims"

  TechCostNullNumberVariable:
    oneOf:
      - type: ["null", number]
      - $ref: "#/$defs/StringFilePattern"
      - type: object
        description: Indexed tech-level cost that allows loading a timeseries from file.
        additionalProperties: false
        required: ["data", "index", "dims"]
        properties:
          data:
            description: >-
              parameter value(s).
              If data is one value, will be applied to all dimension members.
              If a list, must be same length as the index array.
            oneOf:
              - type: "null"
              - type: number
              - $ref: "#/$defs/StringFilePattern"
              - type: array
                minItems: 1
                items:
                  oneOf:
                    - type: "null"
                    - type: number
                    - $ref: "#/$defs/StringFilePattern"
          index:
            $ref: "#/$defs/IndexedParamIndex"
          dims:
            $ref: "#/$defs/TechCostDims"

  ActiveDef:
    type: boolean
    title: Activated component.
    description:
      If false, the model component (tech/node/link) will not make its way through to preprocessing.
      If a node, links between this node and others, via transmission technologies, will also be deactivated.
    default: true

properties:
  parameters:
    type: object
    description: Calliope model arbitrary parameter definitions.
    additionalProperties: false
    properties:
      bigM:
        description: >-
          BigM is a large value used to define certain optimisation problems.
          See https://en.wikipedia.org/wiki/Big_M_method for more information.
          This value should be larger than the largest values that any decision variables can take, but should not be **too** large
          (i.e., do not set it greater than 3 orders of magnitude above the numeric range of the model).
          If too large, numerical problems may arise in the optimisation.
        default: 1e9
        oneOf:
          - type: number
          - type: object
            additionalProperties: false
            properties:
              data:
                type: number
      objective_cost_weights:
        $ref: "#/$defs/TechCostNullNumberFixed"
        default: 1
        description: Weightings for cost classes to apply in the objective function.
    patternProperties:
      '^[^_^\d][\w]*$':
        oneOf:
          - $ref: "#/$defs/unIndexedParamVal"
          - $ref: "#/$defs/IndexedParam"

  techs:
    type: object
    description: Calliope model technology definitions.
    additionalProperties: false
    patternProperties:
      '^[^_^\d][\w]*$':
        type: object
        description: A named technology.
        allOf:
          - required: ["parent"]
          - oneOf:
            - required: ["parent", "carrier_in", "carrier_out"]
              properties:
                parent: {const: conversion}
            - required: ["parent", "carrier_in"]
              not:
                  required: ["carrier_out"]
              properties:
                parent: {const: demand}

            - required: ["parent", "carrier_in", "carrier_out"]
              properties:
                parent: {const: storage}

            - required: ["parent", "carrier_out"]
              not:
                  required: ["carrier_in"]
              properties:
                parent: {const: supply}

            - required: ["parent", "from", "to", "carrier_in", "carrier_out"]
              properties:
                parent: {const: transmission}
                from:
                  title: Starting node.
                  description: The resulting link technology will have `flow_out` == `import` and `flow_in` == `export` at this node.
                  type: string

                to:
                  title: Ending node.
                  description: The resulting link technology will have `flow_out` == `import` and `flow_in` == `export` at this node.
                  type: string

        patternProperties: &pattern_def
          '^(cost_[\w]+)$':
            $ref: "#/$defs/TechCostNullNumberVariable"
        unevaluatedProperties: &uneval_def
          oneOf:
            - $ref: "#/$defs/unIndexedParamVal"
            - type: object
              description: Indexed tech-level parameter with any dtype.
              additionalProperties: false
              required: ["data", "index", "dims"]
              properties:
                data:
                  $ref: "#/$defs/IndexedParamData"
                index:
                  $ref: "#/$defs/IndexedParamIndex"
                dims:
                  $ref: "#/$defs/TechDims"

        properties:
          active:
            $ref: "#/$defs/ActiveDef"
          color:
            type: ["null", string]
            default: .nan
            description: Color that can be used when plotting results.
          carrier_in:
            description: >-
              Carrier(s) consumed by this technology.
              Only `transmission`, `conversion`, `storage`, and `demand` technologies can define this parameter
            oneOf:
              - type: string
              - type: array
                uniqueItems: true
                minItems: 2
                items:
                  type: string
          carrier_out:
            description: >-
              Carrier(s) produced by this technology.
              Only `transmission`, `conversion`, `storage`, and `supply` technologies can define this parameter
            oneOf:
              - type: string
              - type: array
                uniqueItems: true
                minItems: 2
                items:
                  type: string

          carrier_export:
            description: >-
              Carrier(s) produced by this technology that can be exported out of the system boundaries without having to go to a pre-defined `sink` (i.e., via a `demand` technology).
              Must be a subset of `carrier_out`.
            oneOf:
              - type: string
              - type: array
                uniqueItems: true
                minItems: 2
          name:
            type: ["null", string]
            title: Technology longname.
            description: Long name of technology, which can be used in post-processing (e.g., plotting).
            default: .nan

          parent:
            type: string
            enum: [demand, supply, conversion, storage, transmission]
            title: Abstract base technology name.
            description: Should be the name of one of the abstract base classes, from which some initial parameter defaults will be derived and with which certain base math will be triggered.

          cap_method:
            type: string
            default: continuous
            title: Capacity method switch.
            description: One of 'continuous' (LP model), 'binary' (uses purchase decision variable), or 'integer' (uses units and operating _units decision variables)
            enum: [continuous, binary, integer]

          include_storage:
            type: boolean
            default: false
            title: Storage method switch.
            description: When true, math will be triggered to allow discontinuous carrier inflow and outflows across timesteps.

          force_async_flow:
            type: boolean
            default: false
            title: Force asynchronous out/inflow.
            description: If True, non-zero `flow_out` and `flow_in` cannot both occur in the same timestep.

          flow_cap_per_storage_cap_min:
            $ref: "#/$defs/TechParamNullNumberFixed"
            default: 0
            title: Minimum flow capacity per storage capacity
            description: >-
              ratio of minimum charge/discharge (kW) for a given storage capacity (kWh).
              Unit: $\text{hour}^{-1}$

          flow_cap_per_storage_cap_max:
            $ref: "#/$defs/TechParamNullNumberFixed"
            default: 0
            title: Maximum flow capacity per storage capacity
            description: >-
              ratio of maximum charge/discharge (kW) for a given storage capacity (kWh).
              Unit: $\text{hour}^{-1}$

          flow_cap_max:
            $ref: "#/$defs/TechParamNullNumberFixed"
            default: .inf
            title: Maximum rated flow capacity.
            description: >-
              Limits ``flow_cap`` to a maximum.
              Unit: power.

          flow_cap_max_systemwide:
            $ref: "#/$defs/TechParamNullNumberFixed"
            default: .inf
            title: System-wide maximum rated flow capacity.
            description: >-
              Limits the sum of ``flow_cap`` over all nodes in the model to a maximum.
              Unit: power

          flow_cap_min:
            $ref: "#/$defs/TechParamNullNumberFixed"
            default: 0
            title: Minimum rated flow capacity.
            description: >-
              Limits ``flow_cap`` to a minimum.
              NOTE: this will _force_ `flow_cap` to a minimum value unless `cap_method` is set to `binary`.
              Unit: power

          flow_cap_min_systemwide:
            $ref: "#/$defs/TechParamNullNumberFixed"
            default: 0
            title: System-wide minimum rated flow capacity.
            description: >-
              Limits the sum of ``flow_cap`` over all nodes in the model to a minimum.
              NOTE: this will _force_ the sum of `flow_cap` to a minimum value unless `cap_method` is set to `binary`.
              Unit: power.

          flow_out_min_relative:
            $ref: "#/$defs/TechParamNullNumberVariable"
            default: 0
            title: Minimum outflow
            description: >-
              Set to a value between 0 and 1 to force minimum `flow_out` as a fraction of the technology rated capacity.
              If non-zero and `cap_method` is `continuous`, this will force the technology to operate above its minimum value at every timestep.
              Unit: fraction.

          flow_cap_per_unit:
            $ref: "#/$defs/TechParamNullNumberFixed"
            default: .nan
            title: Flow capacity per purchased unit
            description: >-
              Set the capacity of each integer unit of a technology purchased, if `cap_method` is `integer`.
              Unit: $\frac{\text{power}}{\text{unit}}$.

          flow_in_eff:
            $ref: "#/$defs/TechParamNullNumberVariable"
            default: 1.0
            title: Inflow efficiency
            description: >-
              Conversion efficiency from ``source``/``flow_in`` (tech dependent) into the technology.
              Set as value between 1 (no loss) and 0 (all lost).
              Unit: fraction.

          flow_out_eff:
            $ref: "#/$defs/TechParamNullNumberVariable"
            default: 1.0
            title: Outflow efficiency
            description: >-
              Conversion efficiency from the technology to ``sink``/``flow_out`` (tech dependent).
              Set as value between 1 (no loss) and 0 (all lost).
              Unit: fraction.

          flow_out_parasitic_eff:
            $ref: "#/$defs/TechParamNullNumberVariable"
            default: 1.0
            title: Plant parasitic efficiency
            description: >-
              Additional losses as flow gets transferred from the plant to the carrier, e.g. due to plant parasitic consumption.
              Set as value between 1 (no loss) and 0 (all lost).
              Unit: fraction.

          flow_ramping:
            $ref: "#/$defs/TechParamNullNumberFixed"
            default: 1.0
            title: Ramping rate
            description: >-
              limit maximum outflow / inflow / outflow - inflow (technology base class dependent) to a fraction of maximum capacity, which increases by that fraction at each timestep.
              Unit: $\frac{\text{fraction}}{\text{hour}}$.

          export_max:
            $ref: "#/$defs/TechParamNullNumberFixed"
            default: .inf
            title: Maximum allowed carrier export
            description: >-
              If `carrier_export` is defined, limit the allowed export of produced carrier for a technology.
              Unit: power.

          lifetime:
            type: ["null", number]
            default: .inf
            title: Technology lifetime
            description: >-
              Must be defined if fixed capital costs are defined.
              A reasonable value for many technologies is around 20-25 years.
              Unit: years.

          area_use_max:
            $ref: "#/$defs/TechParamNullNumberFixed"
            default: .inf
            title: Maximum usable area.
            description: >-
              If set to a finite value, limits the upper bound of the `area_use` decision variable to this value.
              Unit: $\text{area}^{2}$.

          area_use_min:
            $ref: "#/$defs/TechParamNullNumberFixed"
            default: 0
            title: Minimum usable area.
            description: >-
              Limits the lower bound of the `area_use` decision variable to this value.
              Unit: $\text{area}^{2}$.

          area_use_per_flow_cap:
            $ref: "#/$defs/TechParamNullNumberFixed"
            default: .nan
            title: Area use per flow capacity
            description: >-
              If set, forces ``area_use`` to follow ``flow_cap`` with the given numerical ratio (e.g. setting to 1.5 means that ``area_use == 1.5 * flow_cap``).
              Unit: $\frac{\text{area}^{2}}{\text{power}}$.

          storage_cap_max:
            $ref: "#/$defs/TechParamNullNumberFixed"
            default: .inf
            title: Maximum storage capacity.
            description: >-
              Limit upper bound of `storage_cap` decision variable.
              Unit: energy.

          storage_cap_min:
            $ref: "#/$defs/TechParamNullNumberFixed"
            default: 0
            title: Minimum storage capacity.
            description: >-
              Limit lower bound of `storage_cap` decision variable.
              Unit: energy.

          storage_cap_per_unit:
            $ref: "#/$defs/TechParamNullNumberFixed"
            default: .nan
            title: Storage capacity per purchased unit.
            description: >-
              Set the storage capacity of each integer unit of a technology purchased.
              Unit: Unit: $\frac{\text{energy}}{\text{unit}}$.

          storage_discharge_depth:
            $ref: "#/$defs/TechParamNullNumberVariable"
            default: 0
            title: Storage depth of discharge.
            description: >-
              Defines the minimum level of storage state of charge, as a fraction of total storage capacity.
              Unit: fraction.

          storage_initial:
            $ref: "#/$defs/TechParamNullNumberFixed"
            default: 0
            title: Initial storage level.
            description: >-
               Set stored flow in device at the first timestep, as a fraction of total storage capacity.
               Unit: fraction.

          storage_loss:
            $ref: "#/$defs/TechParamNullNumberVariable"
            default: 0
            title: Storage loss rate
            description: >-
               Rate of storage loss per hour, used to calculate lost stored flow as ``(1 - storage_loss)^hours_per_timestep``.
               Unit: Unit: $\frac{\text{fraction}}{\text{hour}}$.

          units_min_systemwide:
            $ref: "#/$defs/TechParamNullNumberFixed"
            default: 0
            title: System-wide minimum installed flow capacity
            description: >-
               sets the lower bound of the sum across all nodes of the decision variable `units` for a particular technology.
               Unit: integer.

          units_max_systemwide:
            $ref: "#/$defs/TechParamNullNumberFixed"
            default: .inf
            title: System-wide maximum installed flow capacity
            description: >-
               sets the upper bound of the sum across all nodes of the decision variable `units` for a particular technology.
               Unit: integer.

          units_min:
            $ref: "#/$defs/TechParamNullNumberFixed"
            default: 0
            title:  Minimum number of purchased units
            description: >-
              Limits the lower bound of units purchased if `cap_method` is `integer`.
              Unit: integer.

          units_max:
            $ref: "#/$defs/TechParamNullNumberFixed"
            default: .inf
            title: Maximum number of purchased units
            description: >-
              Limits the upper bound of units purchased if `cap_method` is `integer`.
              Unit: integer.

          sink_unit:
            type: string
            default: absolute
            title: Sink unit
            description: >-
              Sets the unit of `Sink` to either `absolute` (unit: energy), `per_area` (unit: energy/area), or `per_cap` (unit: energy/power).
              `per_area` uses the `area_use` decision variable to scale the sink while `per_cap` uses the `flow_cap` decision variable.
            enum: [absolute, per_area, per_cap]

          sink_min:
            oneOf:
              - type: ["null", number]
              - $ref: "#/$defs/StringFilePattern"
            default: 0
            title: Minimum bound on sink.
            description: >-
              Minimum sink use to remove a carrier from the system (e.g., electricity demand, transport distance).
              Unit dictated by ``source_unit``.

          sink_max:
            oneOf:
              - type: ["null", number]
              - $ref: "#/$defs/StringFilePattern"
            default: .inf
            title: Maximum bound on sink.
            description: >-
              Maximum sink use to remove a carrier from the system (e.g., electricity demand, transport distance).
              Unit dictated by ``source_unit``.

          sink_equals:
            oneOf:
              - type: ["null", number]
              - $ref: "#/$defs/StringFilePattern"
            default: .nan
            title: Required sink use.
            description: >-
              Required amount of carrier removal from the system (e.g., electricity demand, transport distance).
              Unit dictated by ``source_unit``.

          source_unit:
            type: string
            default: absolute
            title: Source unit
            description: >-
              Sets the unit of `Source` to either `absolute` (e.g. kWh), `per_area` (e.g. kWh/m2), or `per_cap` (e.g. kWh/kW).
              `per_area` uses the `area_use` decision variable to scale the source while `per_cap` uses the `flow_cap` decision variable.
            enum: [absolute, per_area, per_cap]

          source_cap_equals_flow_cap:
            type: boolean
            default: false
            title: Source capacity equals flow capacity.
            description: If true, the decision variables ``source_cap`` and ``flow_cap`` are forced to equal one another.

          source_eff:
            $ref: "#/$defs/TechParamNullNumberVariable"
            default: 1.0
            title: Source inflow efficiency
            description: >-
              Conversion efficiency from the technology from ``source``.
              Set as value between 1 (no loss) and 0 (all lost).
              Unit: fraction.

          source_min:
            oneOf:
              - type: ["null", number]
              - $ref: "#/$defs/StringFilePattern"
            default: 0
            title: Minimum bound on source.
            description: >-
              Minimum source use to add a carrier from the system (e.g., biofuel, coal, rainfall, wind flow).
              Unit dictated by ``source_unit``.

          source_max:
            oneOf:
              - type: ["null", number]
              - $ref: "#/$defs/StringFilePattern"
            default: 0
            title: Maximum bound on sink.
            description: >-
              Maximum sink use to remove a carrier from the system (e.g., biofuel, coal, rainfall, wind flow).
              Unit dictated by ``source_unit``.

          source_equals:
            oneOf:
              - type: ["null", number]
              - $ref: "#/$defs/StringFilePattern"
            default: .nan
            title: Required sink use.
            description: >-
              Required amount of carrier removal from the system (e.g., biofuel, coal, rainfall, wind flow).
              Unit dictated by ``source_unit``.

          source_cap_max:
            type: number
            default: .inf
            title: Maximum installed source consumption capacity
            description: >-
              Upper limit on `source_cap` decision variable.
              Unit: power.

          source_cap_min:
            type: number
            default: 0
            title: Minimum installed source consumption capacity
            description: >-
              Lower limit on `source_cap` decision variable.
              Unit: power.

          one_way:
            type: boolean
            title: One way transmission.
            description: Forces a transmission technology to only move flow in one direction on the link, i.e. from `from` to `to`.
            default: false

          distance:
            type: ["null", number]
            default: .nan
            title: Distance spanned by link.
            description: >-
              Used for per_distance constraints. If not defined, it will be automatically inferred from latitude/longitude of nodes in a link if not given here.

          flow_in_eff_per_distance:
            $ref: "#/$defs/TechParamNullNumberVariable"
            default: 1.0
            title: Inflow (i.e., export from node) efficiency per distance of transmission links.
            description: >-
              Total link efficiency will be calculated as `\text{flow_in_eff}\mul{}\text{flow_in_eff_per_distance}^\text{distance}$.
              Set as value between 1 (no loss) and 0 (all lost).

          flow_out_eff_per_distance:
            $ref: "#/$defs/TechParamNullNumberVariable"
            default: 1.0
            title: Outflow (i.e., import from node) efficiency per distance of transmission links.
            description: >-
              Total link efficiency will be calculated as `\text{flow_out_eff}\mul{}\text{flow_out_eff_per_distance}^\text{distance}$.
              Set as value between 1 (no loss) and 0 (all lost).

          cost_flow_cap_per_distance:
            oneOf:
              - type: ["null", number]
              - $ref: "#/$defs/TechCostNullNumberFixed"
            default: 0
            title: Cost of flow capacity, per unit distance
            description: >-
              Cost per unit of the decision variable `flow_cap` and per unit distance of a transmission link.
              Applied to transmission links only.
              Unit: $(\text{power}\mul\text{distance}^{-1}$

          cost_purchase_per_distance:
            $ref: "#/$defs/TechCostNullNumberFixed"
            default: 0
            title: Purchase cost per unit distance for transmission techs.
            description: >-
              Cost applied if the binary variable `purchased` is 1 or per unit of the integer variable `units`.
              Requires the parameter `cap_method` to be `binary` or `integer`.
              Unit: $(\text{purchased_unit}\mul\text{distance})^{-1}$

          cost_flow_cap:
            $ref: "#/$defs/TechCostNullNumberFixed"
            default: 0
            title: Cost of flow capacity.
            description: >-
              Cost per unit of the decision variable `flow_cap`.
              Unit: $\text{power}^{-1}$.

          cost_export:
            $ref: "#/$defs/TechCostNullNumberVariable"
            default: 0
            title: Carrier export cost.
            description: >-
              Cost per unit of `flow_export` in each timestep.
              Usually used in the negative sense, as a subsidy.
              Unit: $\text{energy}^{-1}$.

          cost_interest_rate:
            $ref: "#/$defs/TechCostNullNumberFixed"
            default: 0
            title: Interest rate.
            description: >-
              Used when computing levelized costs and technology depreciation_rate (relative to lifetime).
              Unit: fraction

          cost_om_annual:
            $ref: "#/$defs/TechCostNullNumberFixed"
            default: 0
            title: Annual O&M costs
            description: >-
              Annual costs applied per unit `flow_cap`.
              These costs are not subject to being recalculated relative to technology lifetime, only scaled to reflect the fraction of one year that the model represents (e.g., 7 days ~= 0.02 of a year).
              Unit: $\text{power}^{-1}$.

          cost_om_annual_investment_fraction:
            $ref: "#/$defs/TechCostNullNumberFixed"
            default: 0
            title: Fractional annual O&M costs.
            description: >-
              Add an additional cost to total investment costs (except `cost_om_annual`) that is a fraction of that total.
              Unit: fraction / total investment.

          cost_flow_in:
            $ref: "#/$defs/TechCostNullNumberVariable"
            default: 0
            title: Carrier inflow cost.
            description: >-
              Cost per unit of `flow_in` in each timestep.
              Unit: $\text{energy}^{-1}$.

          cost_flow_out:
            $ref: "#/$defs/TechCostNullNumberVariable"
            default: 0
            title: Carrier outflow cost
            description: >-
              Cost per unit of `flow_in` in each timestep.
              Unit: $\text{energy}^{-1}$.

          cost_purchase:
            $ref: "#/$defs/TechCostNullNumberFixed"
            default: 0
            title: Purchase cost.
            description: >-
              Cost applied if the binary variable `purchased` is 1 or per unit of the integer variable `units`.
              Requires the parameter `cap_method` to be `binary` or `integer`.
              Unit: $\text{purchased_unit}^{-1}$

          cost_area_use:
            $ref: "#/$defs/TechCostNullNumberFixed"
            default: 0
            title: Cost of area use.
            description: >-
              Cost per unit `area_use`.
              Unit: $\text{area}^{-2}$.

          cost_source_cap:
            $ref: "#/$defs/TechCostNullNumberFixed"
            default: 0
            title: Cost of source flow capacity.
            description: >-
              Cost per unit `source_cap`.
              Unit: $\{power}^{-1}$.

          cost_storage_cap:
            $ref: "#/$defs/TechCostNullNumberFixed"
            default: 0
            title: Cost of storage capacity.
            description: >-
              Cost per unit `storage_cap`, i.e., the maximum available capacity of the storage technology's "reservoir".
              Unit: $\{energy}^{-1}$.

          cost_depreciation_rate:
            $ref: "#/$defs/TechCostNullNumberFixed"
            default: 1
            title: Depreciation rate.
            description: >-
              Applied to "annualise" investment costs so they are comparable to variable costs.
              If not provided, this will be calculated using technology `lifetime` and `cost_interest_rate`.
              Unit: fraction.

  nodes:
    type: object
    description: Calliope model node definitions.
    additionalProperties: false
    patternProperties:
      '^[^_^\d][\w]*$':
        type: object
        title: A named node.
        dependentRequired": {
          latitude: ["longitude"],
          longitude: ["latitude"]
        }

        patternProperties: *pattern_def
        unevaluatedProperties: *uneval_def
        properties:
          active:
            $ref: "#/$defs/ActiveDef"
          latitude:
            type: number
            title: Latitude (WGS84 / EPSG4326).
            minimum: -90
            maximum: 90
          longitude:
            type: number
            title: Longitude (WGS84 / EPSG4326).
            minimum: -180
            maximum: 180
          available_area:
            type: number
            minimum: 0
            default: .inf