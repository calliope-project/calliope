##
# Scenarios are optional, named combinations of overrides
##
scenarios:
  cold_fusion_with_production_share: ["cold_fusion", "cold_fusion_prod_share"]
  cold_fusion_with_capacity_share: ["cold_fusion", "cold_fusion_cap_share"]

##
# Overrides are the building blocks from which scenarios can be defined
##
overrides:
  profiling:
    config:
      init.name: "National-scale example model (profiling run)"
      init.time_subset: ["2005-01-01", "2005-01-15"]
      solve.solver: cbc

  time_resampling:
    config:
      init:
        name: "National-scale example model with time resampling"
        time_subset: ["2005-01", "2005-01"]
        time_resample: "6H"

  time_clustering:
    config:
      init:
        name: "National-scale example model with time clustering"
        time_subset: null # No time subsetting
        time_cluster: cluster_days.csv

  spores:
    config:
      build.mode: spores
      solve:
        spores_score_cost_class: "spores_score"
        spores_number: 3
    parameters:
      # In SPORES mode, slack to apply when setting the upper limit on system `spores_slack_cost_group` costs.
      # The constraint will limit the costs to `(spores_slack + 1) * sum(costs[cost=spores_slack_cost_group])`.
      spores_slack: 0.1
      objective_cost_weights:
        data: [1, 0]
        index: ["monetary", "spores_score"]
      # In SPORES mode, the new objective function cost class weightings to apply after the initial base run.
      spores_objective_cost_weights:
        data: [1, 0]
        index: [spores_score, monetary]
        dims: costs

    # FIXME: replace group constraint in SPORES mode
    # group_constraints:
    #    systemwide_cost_max.cost_max.monetary: 1e10  # very large, non-infinite value
    tech_groups:
      cost_dim_setter:
        cost_flow_cap:
          index: [monetary, spores_score]
          dims: costs
        cost_interest_rate:
          data: [0.10, 1]
          index: [monetary, spores_score]
          dims: costs
    techs:
      ccgt.cost_flow_cap.data: [750, 0]
      csp.cost_flow_cap.data: [1000, 0]
      battery.cost_flow_cap.data: [null, 0]
      region1_to_region2.cost_flow_cap.data: [200, 0]
  operate:
    config:
      init.time_subset: ["2005-01-01", "2005-01-10"]
      build.mode: operate
      solve:
        operate_window: 12
        operate_horizon: 24
    nodes:
      region1.techs.ccgt.flow_cap_max: 30000

      region2.techs.battery.flow_cap_max: 1000
      region2.techs.battery.storage_cap_max: 5240

      region1_1.techs.csp.flow_cap_max: 10000
      region1_1.techs.csp.storage_cap_max: 244301
      region1_1.techs.csp.area_use_max: 130385

      region1_2.techs.csp.flow_cap_max: 0
      region1_2.techs.csp.storage_cap_max: 0
      region1_2.techs.csp.area_use_max: 0

      region1_3.techs.csp.flow_cap_max: 2534
      region1_3.techs.csp.storage_cap_max: 25301
      region1_3.techs.csp.area_use_max: 8487

      region1_to_region2.techs.ac_transmission.flow_cap_max: 3231
      region1_to_region1_1.techs.free_transmission.flow_cap_max: 9000
      region1_to_region1_2.techs.free_transmission.flow_cap_max: 0
      region1_to_region1_3.techs.free_transmission.flow_cap_max: 2281

  check_feasibility:
    config:
      build:
        ensure_feasibility: False
        objective: "check_feasibility"
      init:
        time_subset: ["2005-01-04", "2005-01-04"]

  reserve_margin:
    parameters:
      # Model-wide settings for the system-wide reserve margin
      # Even setting a reserve margin of zero activates the constraint,
      # forcing enough installed capacity to cover demand in
      # the maximum demand timestep
      reserve_margin:
        data: 0.10 # 10% reserve margin for power
        index: power
        dims: carriers

  ##
  # Overrides to demonstrate the run generator ("calliope generate_runs")
  ##

  run1:
    config.init.time_subset: ["2005-01-01", "2005-01-31"]
  run2:
    config.init.time_subset: ["2005-02-01", "2005-02-31"]
  run3:
    config.init.time_subset: ["2005-01-01", "2005-01-31"]
    nodes.region1.techs.ccgt.flow_cap_max: 0 # Disallow CCGT
  run4:
    time_subset: ["2005-02-01", "2005-02-31"]
    nodes.region1.techs.ccgt.flow_cap_max: 0 # Disallow CCGT

  ##
  # Overrides to demonstrate group constraints
  ##

  cold_fusion: # Defines a hypothetical cold fusion tech to use in group constraints
    techs:
      cold_fusion:
        name: "Cold fusion"
        color: "#233B39"
        parent: supply
        inherit: cost_dim_setter
        carrier_out: power
        flow_cap_max: 10000
        lifetime: 50
        cost_interest_rate.data: 0.20
        cost_flow_cap.data: 100
    nodes.region1.techs.cold_fusion: null
    nodes.region2.techs.cold_fusion: null

  # TODO: replace with non-group constraint
  # cold_fusion_prod_share:
  #     group_constraints:
  #         min_carrier_prod_share_group:
  #             techs: ['csp', 'cold_fusion']
  #             carrier_prod_share_min:
  #                 # At least 85% of power supply must come from CSP and cold fusion together
  #                 power: 0.85

  # cold_fusion_cap_share:
  #     group_constraints:
  #         max_cap_share_group:
  #             techs: ['csp', 'cold_fusion']
  #             # At most 20% of total flow_cap can come from CSP and cold fusion together
  #             flow_cap_share_max: 0.20
  #     nodes:
  #         region1:
  #             techs:
  #                 ccgt:
  #                     constraints:
  #                         flow_cap_max: 100000  # Increased to keep model feasible

  minimize_emissions_costs:
    parameters:
      objective_cost_weights.data: { "emissions": 1, "monetary": 0 }
    techs:
      ccgt:
        cost_flow_out:
          data: 100 # kgCO2/kWh
          index: emissions
          dims: costs
      csp:
        cost_flow_out:
          data:
            - 0.002 # EUR/kwh
            - 10 # kgCO2/kWh
          index: [monetary, emissions]
          dims: costs

  maximize_utility_costs:
    parameters:
      objective_cost_weights.data: { "utility": -1, "monetary": 0 }
    techs:
      ccgt:
        cost_flow_out:
          data: 10 # arbitrary utility value
          index: utility
          dims: costs
      csp:
        cost_flow_out:
          data:
            - 0.002 # EUR/kwh
            - 100 # arbitrary utility value
          index: [monetary, utility]
          dims: costs

  capacity_factor:
    techs.ccgt.capacity_factor_min: 0.8
    techs.ccgt.capacity_factor_max: 0.9
